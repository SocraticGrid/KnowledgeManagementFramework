<?xml version="1.0" encoding="UTF-8"?>
<!--
This file was generated by Altova MapForce 2013sp1

YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.

Refer to the Altova MapForce Documentation for further details.
http://www.altova.com/mapforce
-->
<xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:ns0="http://mdws.medora.va.gov/EmrSvc" xmlns:vmf="http://www.altova.com/MapForce/UDF/vmf" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2005/xpath-functions" exclude-result-prefixes="ns0 vmf xs fn">
	<xsl:template name="vmf:vmf1_inputtoresult">
		<xsl:param name="input" select="()"/>
		<xsl:choose>
			<xsl:when test="$input='ACTIVE'">
				<xsl:value-of select="'active'"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="'completed'"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:output method="xml" encoding="UTF-8" indent="yes"/>
	<xsl:param name="status" as="xs:string?" select="()"/>
	<xsl:template match="/">
		<PrescriptionList xmlns="http://hl7.org/fhir" xmlns:xhtml="http://www.w3.org/1999/xhtml">
			<xsl:attribute name="xsi:schemaLocation" namespace="http://www.w3.org/2001/XMLSchema-instance" select="'http://hl7.org/fhir C:/Users/JERRYG~1/Dropbox/Cognitive/CDS/fhir-all-xsd/cm_prescriptions.xsd'"/>
			<xsl:for-each select="ns0:TaggedTextArray">
				<xsl:variable name="var6_resultof_filter" as="node()*">
					<xsl:for-each select="ns0:results/ns0:TaggedText/ns0:text/ns0:results/ns0:meds/ns0:med">
						<xsl:variable name="var4_resultof_map" as="xs:boolean?">
							<xsl:for-each select="ns0:vaStatus">
								<xsl:variable name="var1_value" as="node()?" select="@value"/>
								<xsl:choose>
									<xsl:when test="fn:exists($var1_value)">
										<xsl:variable name="var2_result" as="xs:string">
											<xsl:choose>
												<xsl:when test="fn:exists($status)">
													<xsl:sequence select="$status"/>
												</xsl:when>
												<xsl:otherwise>
													<xsl:sequence select="'active;completed'"/>
												</xsl:otherwise>
											</xsl:choose>
										</xsl:variable>
										<xsl:variable name="var3_resultof_vmf__inputtoresult" as="xs:string">
											<xsl:call-template name="vmf:vmf1_inputtoresult">
												<xsl:with-param name="input" select="fn:string($var1_value)" as="xs:string"/>
											</xsl:call-template>
										</xsl:variable>
										<xsl:sequence select="fn:contains($var2_result, $var3_resultof_vmf__inputtoresult)"/>
									</xsl:when>
									<xsl:otherwise>
										<xsl:sequence select="fn:false()"/>
									</xsl:otherwise>
								</xsl:choose>
							</xsl:for-each>
						</xsl:variable>
						<xsl:variable name="var5_resultof_any" as="xs:boolean" select="fn:exists($var4_resultof_map[.])"/>
						<xsl:if test="$var5_resultof_any">
							<xsl:sequence select="."/>
						</xsl:if>
					</xsl:for-each>
				</xsl:variable>
				<xsl:for-each select="$var6_resultof_filter">
					<xsl:variable name="var7_vaStatus" as="node()?" select="ns0:vaStatus"/>
					<xsl:variable name="var8_facility" as="node()?" select="ns0:facility"/>
					<xsl:variable name="var9_resultof_cast" as="xs:string" select="xs:string(xs:anyURI('org.socraticgrid.constants.VAStatus'))"/>
					<xsl:variable name="var10_doses" as="node()?" select="ns0:doses"/>
					<xsl:variable name="var11_start" as="node()?" select="ns0:start"/>
					<xsl:variable name="var12_products" as="node()?" select="ns0:products"/>
					<xsl:variable name="var13_orderingProvider" as="node()?" select="ns0:orderingProvider"/>
					<xsl:variable name="var14_stop" as="node()?" select="ns0:stop"/>
					<xsl:variable name="var15_resultof_exists" as="xs:boolean" select="fn:exists($var12_products)"/>
					<xsl:variable name="var16_val" as="node()?">
						<xsl:if test="$var15_resultof_exists">
							<xsl:attribute name="value" namespace="" select="xs:string(xs:anyURI('vuid'))"/>
						</xsl:if>
					</xsl:variable>
					<Prescription>
						<xsl:variable name="var19_resultof_filter" as="node()?">
							<xsl:for-each select="ns0:id">
								<xsl:variable name="var17_value" as="node()?" select="@value"/>
								<xsl:variable name="var18_resultof_exists" as="xs:boolean" select="fn:exists($var17_value)"/>
								<xsl:if test="$var18_resultof_exists">
									<xsl:sequence select="."/>
								</xsl:if>
							</xsl:for-each>
						</xsl:variable>
						<xsl:for-each select="$var19_resultof_filter">
							<xsl:attribute name="id" namespace="" select="xs:string(xs:integer(fn:string(@value)))"/>
						</xsl:for-each>
						<contained>
							<Location>
								<name>
									<xsl:variable name="var22_resultof_filter" as="node()?">
										<xsl:for-each select="$var8_facility">
											<xsl:variable name="var20_code" as="node()?" select="@code"/>
											<xsl:variable name="var21_resultof_exists" as="xs:boolean" select="fn:exists($var20_code)"/>
											<xsl:if test="$var21_resultof_exists">
												<xsl:sequence select="."/>
											</xsl:if>
										</xsl:for-each>
									</xsl:variable>
									<xsl:for-each select="$var22_resultof_filter">
										<xsl:attribute name="id" namespace="" select="xs:string(xs:integer(fn:string(@code)))"/>
									</xsl:for-each>
									<xsl:variable name="var25_resultof_filter" as="node()?">
										<xsl:for-each select="$var8_facility">
											<xsl:variable name="var23_name" as="node()?" select="@name"/>
											<xsl:variable name="var24_resultof_exists" as="xs:boolean" select="fn:exists($var23_name)"/>
											<xsl:if test="$var24_resultof_exists">
												<xsl:sequence select="."/>
											</xsl:if>
										</xsl:for-each>
									</xsl:variable>
									<xsl:for-each select="$var25_resultof_filter">
										<xsl:variable name="var26_resultof_cast" as="xs:string" select="fn:string(@name)"/>
										<xsl:attribute name="value" namespace="" select="$var26_resultof_cast"/>
									</xsl:for-each>
								</name>
							</Location>
						</contained>
						<identifier>
							<system>
								<xsl:attribute name="value" namespace="" select="xs:string(xs:anyURI('OrderId'))"/>
							</system>
							<xsl:variable name="var29_resultof_filter" as="node()?">
								<xsl:for-each select="ns0:orderID">
									<xsl:variable name="var27_value" as="node()?" select="@value"/>
									<xsl:variable name="var28_resultof_exists" as="xs:boolean" select="fn:exists($var27_value)"/>
									<xsl:if test="$var28_resultof_exists">
										<xsl:sequence select="."/>
									</xsl:if>
								</xsl:for-each>
							</xsl:variable>
							<id>
								<xsl:for-each select="$var29_resultof_filter">
									<xsl:attribute name="value" namespace="" select="xs:string(xs:integer(fn:string(@value)))"/>
								</xsl:for-each>
							</id>
						</identifier>
						<status>
							<xsl:for-each select="$var7_vaStatus[fn:exists(@value)]">
								<xsl:attribute name="value" namespace="">
									<xsl:call-template name="vmf:vmf1_inputtoresult">
										<xsl:with-param name="input" select="fn:string(@value)" as="xs:string"/>
									</xsl:call-template>
								</xsl:attribute>
							</xsl:for-each>
							<extension>
								<url>
									<xsl:attribute name="value" namespace="" select="xs:string(xs:anyURI('org.socraticgrid.constant.RecordStatus'))"/>
								</url>
								<valueString>
									<xsl:for-each select="ns0:status[fn:exists(@value)]">
										<xsl:attribute name="value" namespace="" select="fn:string(@value)"/>
									</xsl:for-each>
								</valueString>
							</extension>
							<extension>
								<url>
									<xsl:attribute name="value" namespace="" select="$var9_resultof_cast"/>
								</url>
								<valueCoding>
									<system>
										<xsl:attribute name="value" namespace="" select="$var9_resultof_cast"/>
									</system>
									<code>
										<xsl:for-each select="$var7_vaStatus[fn:exists(@value)]">
											<xsl:attribute name="value" namespace="" select="fn:string(@value)"/>
										</xsl:for-each>
									</code>
								</valueCoding>
							</extension>
						</status>
						<patient>
							<xsl:attribute name="id" namespace="" select="xs:string(xs:decimal('0'))"/>
							<display>
								<xsl:attribute name="value" namespace="" select="'undefined'"/>
							</display>
						</patient>
						<prescriber>
							<display>
								<xsl:variable name="var32_resultof_filter" as="node()?">
									<xsl:for-each select="$var13_orderingProvider">
										<xsl:variable name="var30_code" as="node()?" select="@code"/>
										<xsl:variable name="var31_resultof_exists" as="xs:boolean" select="fn:exists($var30_code)"/>
										<xsl:if test="$var31_resultof_exists">
											<xsl:sequence select="."/>
										</xsl:if>
									</xsl:for-each>
								</xsl:variable>
								<xsl:for-each select="$var32_resultof_filter">
									<xsl:attribute name="id" namespace="" select="xs:string(xs:integer(fn:string(@code)))"/>
								</xsl:for-each>
								<xsl:variable name="var35_resultof_filter" as="node()?">
									<xsl:for-each select="$var13_orderingProvider">
										<xsl:variable name="var33_name" as="node()?" select="@name"/>
										<xsl:variable name="var34_resultof_exists" as="xs:boolean" select="fn:exists($var33_name)"/>
										<xsl:if test="$var34_resultof_exists">
											<xsl:sequence select="."/>
										</xsl:if>
									</xsl:for-each>
								</xsl:variable>
								<xsl:for-each select="$var35_resultof_filter">
									<xsl:variable name="var36_resultof_cast" as="xs:string" select="fn:string(@name)"/>
									<xsl:attribute name="value" namespace="" select="$var36_resultof_cast"/>
								</xsl:for-each>
							</display>
						</prescriber>
						<xsl:variable name="var39_resultof_filter" as="node()?">
							<xsl:for-each select="ns0:ordered">
								<xsl:variable name="var37_value" as="node()?" select="@value"/>
								<xsl:variable name="var38_resultof_exists" as="xs:boolean" select="fn:exists($var37_value)"/>
								<xsl:if test="$var38_resultof_exists">
									<xsl:sequence select="."/>
								</xsl:if>
							</xsl:for-each>
						</xsl:variable>
						<prescribed>
							<xsl:for-each select="$var39_resultof_filter">
								<xsl:variable name="var40_resultof_cast" as="xs:double" select="xs:double(xs:decimal('1'))"/>
								<xsl:variable name="var41_resultof_cast" as="xs:double" select="xs:double(xs:decimal('3'))"/>
								<xsl:variable name="var42_resultof_cast" as="xs:double" select="xs:double('1700')"/>
								<xsl:variable name="var43_resultof_cast" as="xs:double" select="xs:double(xs:decimal('4'))"/>
								<xsl:variable name="var44_resultof_cast" as="xs:double" select="xs:double(xs:decimal('6'))"/>
								<xsl:variable name="var45_resultof_cast" as="xs:double" select="xs:double(xs:decimal('2'))"/>
								<xsl:variable name="var46_resultof_cast" as="xs:string" select="fn:string(@value)"/>
								<xsl:variable name="var47_resultof_substring" as="xs:string" select="fn:substring($var46_resultof_cast, $var40_resultof_cast, $var41_resultof_cast)"/>
								<xsl:variable name="var48_resultof_substring" as="xs:string" select="fn:substring($var46_resultof_cast, $var43_resultof_cast, $var45_resultof_cast)"/>
								<xsl:variable name="var49_resultof_substring" as="xs:string" select="fn:substring($var46_resultof_cast, $var44_resultof_cast, $var45_resultof_cast)"/>
								<xsl:variable name="var50_resultof_substring" as="xs:string" select="fn:substring($var46_resultof_cast, xs:double(xs:decimal('9')), $var45_resultof_cast)"/>
								<xsl:variable name="var51_resultof_cast" as="xs:double" select="xs:double($var47_resultof_substring)"/>
								<xsl:variable name="var52_resultof_add" as="xs:double" select="($var51_resultof_cast + $var42_resultof_cast)"/>
								<xsl:variable name="var53_resultof_cast" as="xs:string" select="xs:string($var52_resultof_add)"/>
								<xsl:variable name="var54_resultof_concat" as="xs:string" select="fn:concat($var53_resultof_cast, '-')"/>
								<xsl:variable name="var55_resultof_concat" as="xs:string" select="fn:concat($var54_resultof_concat, $var48_resultof_substring)"/>
								<xsl:variable name="var56_resultof_concat" as="xs:string" select="fn:concat($var55_resultof_concat, '-')"/>
								<xsl:variable name="var57_resultof_concat" as="xs:string" select="fn:concat($var56_resultof_concat, $var49_resultof_substring)"/>
								<xsl:variable name="var67_val" as="xs:string">
									<xsl:choose>
										<xsl:when test="($var50_resultof_substring = '24')">
											<xsl:sequence select="fn:concat($var57_resultof_concat, 'T23:59:59')"/>
										</xsl:when>
										<xsl:otherwise>
											<xsl:variable name="var58_resultof_string_length" as="xs:integer" select="fn:string-length($var46_resultof_cast)"/>
											<xsl:choose>
												<xsl:when test="($var58_resultof_string_length &gt; xs:decimal('7'))">
													<xsl:variable name="var59_resultof_cast" as="xs:double" select="xs:double(xs:decimal('11'))"/>
													<xsl:variable name="var60_resultof_substring" as="xs:string" select="fn:substring($var46_resultof_cast, $var59_resultof_cast, $var45_resultof_cast)"/>
													<xsl:variable name="var61_resultof_concat" as="xs:string" select="fn:concat($var60_resultof_substring, '00000000')"/>
													<xsl:variable name="var62_resultof_substring" as="xs:string" select="fn:substring($var61_resultof_concat, $var40_resultof_cast, $var45_resultof_cast)"/>
													<xsl:variable name="var63_resultof_concat" as="xs:string" select="fn:concat($var57_resultof_concat, 'T')"/>
													<xsl:variable name="var64_resultof_concat" as="xs:string" select="fn:concat($var63_resultof_concat, $var50_resultof_substring)"/>
													<xsl:variable name="var65_resultof_concat" as="xs:string" select="fn:concat($var64_resultof_concat, ':')"/>
													<xsl:variable name="var66_resultof_concat" as="xs:string" select="fn:concat($var65_resultof_concat, $var62_resultof_substring)"/>
													<xsl:choose>
														<xsl:when test="($var58_resultof_string_length &gt; xs:decimal('13'))">
															<xsl:sequence select="fn:concat(fn:concat($var66_resultof_concat, ':'), fn:substring(fn:concat(fn:substring($var46_resultof_cast, xs:double(xs:decimal('13')), $var45_resultof_cast), '00000000'), $var40_resultof_cast, $var45_resultof_cast))"/>
														</xsl:when>
														<xsl:otherwise>
															<xsl:sequence select="fn:concat($var66_resultof_concat, ':00')"/>
														</xsl:otherwise>
													</xsl:choose>
												</xsl:when>
												<xsl:otherwise>
													<xsl:sequence select="fn:concat($var57_resultof_concat, 'T00:00:00')"/>
												</xsl:otherwise>
											</xsl:choose>
										</xsl:otherwise>
									</xsl:choose>
								</xsl:variable>
								<xsl:attribute name="value" namespace="" select="$var67_val"/>
							</xsl:for-each>
						</prescribed>
						<dispense>
							<xsl:variable name="var70_resultof_filter" as="node()?">
								<xsl:for-each select="ns0:fillsAllowed">
									<xsl:variable name="var68_value" as="node()?" select="@value"/>
									<xsl:variable name="var69_resultof_exists" as="xs:boolean" select="fn:exists($var68_value)"/>
									<xsl:if test="$var69_resultof_exists">
										<xsl:sequence select="."/>
									</xsl:if>
								</xsl:for-each>
							</xsl:variable>
							<repeats>
								<xsl:for-each select="$var70_resultof_filter">
									<xsl:attribute name="value" namespace="" select="xs:string(xs:integer(fn:string(@value)))"/>
								</xsl:for-each>
							</repeats>
							<quantity>
								<xsl:variable name="var73_resultof_filter" as="node()?">
									<xsl:for-each select="ns0:quantity">
										<xsl:variable name="var71_value" as="node()?" select="@value"/>
										<xsl:variable name="var72_resultof_exists" as="xs:boolean" select="fn:exists($var71_value)"/>
										<xsl:if test="$var72_resultof_exists">
											<xsl:sequence select="."/>
										</xsl:if>
									</xsl:for-each>
								</xsl:variable>
								<value>
									<xsl:for-each select="$var73_resultof_filter">
										<xsl:attribute name="value" namespace="" select="xs:string(xs:integer(fn:string(@value)))"/>
									</xsl:for-each>
								</value>
								<xsl:variable name="var77_resultof_filter" as="node()?">
									<xsl:for-each select="ns0:form[fn:exists(@value)]">
										<xsl:variable name="var74_resultof_cast" as="xs:string" select="fn:string(@value)"/>
										<xsl:variable name="var76_result" as="xs:boolean">
											<xsl:choose>
												<xsl:when test="fn:contains($var74_resultof_cast, ';')">
													<xsl:variable name="var75_resultof_index_map" as="xs:boolean*">
														<xsl:for-each select="tokenize($var74_resultof_cast, replace(';', '(\.|\$|\^|\{|\[|\(|\||\)|\*|\+|\?|\\)', '\\$1'))">
															<xsl:sequence select="(xs:decimal('1') = position())"/>
														</xsl:for-each>
													</xsl:variable>
													<xsl:sequence select="fn:exists($var75_resultof_index_map[.])"/>
												</xsl:when>
												<xsl:otherwise>
													<xsl:sequence select="fn:true()"/>
												</xsl:otherwise>
											</xsl:choose>
										</xsl:variable>
										<xsl:if test="$var76_result">
											<xsl:sequence select="."/>
										</xsl:if>
									</xsl:for-each>
								</xsl:variable>
								<units>
									<xsl:for-each select="$var77_resultof_filter">
										<xsl:variable name="var78_resultof_cast" as="xs:string" select="fn:string(@value)"/>
										<xsl:attribute name="value" namespace="">
											<xsl:choose>
												<xsl:when test="fn:contains($var78_resultof_cast, ';')">
													<xsl:variable name="var79_resultof_index_map" as="xs:string*">
														<xsl:for-each select="tokenize($var78_resultof_cast, replace(';', '(\.|\$|\^|\{|\[|\(|\||\)|\*|\+|\?|\\)', '\\$1'))">
															<xsl:if test="(xs:decimal('1') = position())">
																<xsl:sequence select="."/>
															</xsl:if>
														</xsl:for-each>
													</xsl:variable>
													<xsl:sequence select="xs:string(fn:string-join(for $x in $var79_resultof_index_map return xs:string($x), ' '))"/>
												</xsl:when>
												<xsl:otherwise>
													<xsl:sequence select="$var78_resultof_cast"/>
												</xsl:otherwise>
											</xsl:choose>
										</xsl:attribute>
									</xsl:for-each>
								</units>
							</quantity>
						</dispense>
						<medicine>
							<xsl:for-each select="$var12_products">
								<xsl:variable name="var80_resultof_first" as="node()" select="ns0:product/ns0:class"/>
								<xsl:variable name="var81_code" as="node()?" select="$var80_resultof_first/@code"/>
								<xsl:variable name="var82_name" as="node()?" select="$var80_resultof_first/@name"/>
								<extension>
									<url>
										<xsl:attribute name="value" namespace="" select="xs:string(xs:anyURI('org.socraticgrid.constants.drugclass'))"/>
									</url>
									<valueCodeableConcept>
										<coding>
											<system>
												<xsl:attribute name="value" namespace="" select="xs:string(xs:anyURI('drugclass'))"/>
											</system>
											<code>
												<xsl:if test="fn:exists($var81_code)">
													<xsl:attribute name="value" namespace="" select="fn:string($var81_code)"/>
												</xsl:if>
											</code>
										</coding>
										<text>
											<xsl:if test="fn:exists($var82_name)">
												<xsl:attribute name="value" namespace="" select="fn:string($var82_name)"/>
											</xsl:if>
										</text>
									</valueCodeableConcept>
								</extension>
							</xsl:for-each>
							<identification>
								<coding>
									<system>
										<xsl:sequence select="$var16_val"/>
									</system>
									<code>
										<xsl:for-each select="$var12_products[fn:exists(ns0:product/ns0:vaProduct/@vuid)]">
											<xsl:attribute name="value" namespace="" select="xs:string(xs:integer(fn:string(ns0:product/ns0:vaProduct/@vuid)))"/>
										</xsl:for-each>
									</code>
								</coding>
								<xsl:variable name="var83_result" as="xs:string?">
									<xsl:choose>
										<xsl:when test="$var15_resultof_exists">
											<xsl:for-each select="$var12_products[fn:exists(ns0:product/ns0:vaProduct/@name)]">
												<xsl:sequence select="fn:string(ns0:product/ns0:vaProduct/@name)"/>
											</xsl:for-each>
										</xsl:when>
										<xsl:otherwise>
											<xsl:for-each select="ns0:name[fn:exists(@value)]">
												<xsl:sequence select="fn:string(@value)"/>
											</xsl:for-each>
										</xsl:otherwise>
									</xsl:choose>
								</xsl:variable>
								<text>
									<xsl:if test="fn:exists($var83_result)">
										<xsl:attribute name="value" namespace="">
											<xsl:choose>
												<xsl:when test="$var15_resultof_exists">
													<xsl:sequence select="fn:string($var12_products[fn:exists(ns0:product/ns0:vaProduct/@name)]/ns0:product/ns0:vaProduct/@name)"/>
												</xsl:when>
												<xsl:otherwise>
													<xsl:sequence select="fn:string(ns0:name[fn:exists(@value)]/@value)"/>
												</xsl:otherwise>
											</xsl:choose>
										</xsl:attribute>
									</xsl:if>
								</text>
							</identification>
							<activeIngredient>
								<identification>
									<coding>
										<system>
											<xsl:sequence select="$var16_val"/>
										</system>
										<code>
											<xsl:for-each select="$var12_products[fn:exists(ns0:product/ns0:vaGeneric/@vuid)]">
												<xsl:attribute name="value" namespace="" select="xs:string(xs:integer(fn:string(ns0:product/ns0:vaGeneric/@vuid)))"/>
											</xsl:for-each>
										</code>
									</coding>
									<text>
										<xsl:for-each select="$var12_products[fn:exists(ns0:product/ns0:vaGeneric/@name)]">
											<xsl:attribute name="value" namespace="" select="fn:string(ns0:product/ns0:vaGeneric/@name)"/>
										</xsl:for-each>
									</text>
								</identification>
							</activeIngredient>
						</medicine>
						<administrationRequest>
							<description>
								<xsl:for-each select="ns0:sig">
									<xsl:attribute name="value" namespace="" select="fn:string(.)"/>
								</xsl:for-each>
							</description>
							<xsl:variable name="var86_resultof_filter" as="node()?">
								<xsl:for-each select="$var11_start">
									<xsl:variable name="var84_value" as="node()?" select="@value"/>
									<xsl:variable name="var85_resultof_exists" as="xs:boolean" select="fn:exists($var84_value)"/>
									<xsl:if test="$var85_resultof_exists">
										<xsl:sequence select="."/>
									</xsl:if>
								</xsl:for-each>
							</xsl:variable>
							<start>
								<xsl:for-each select="$var86_resultof_filter">
									<xsl:variable name="var87_resultof_cast" as="xs:double" select="xs:double(xs:decimal('1'))"/>
									<xsl:variable name="var88_resultof_cast" as="xs:double" select="xs:double(xs:decimal('3'))"/>
									<xsl:variable name="var89_resultof_cast" as="xs:double" select="xs:double('1700')"/>
									<xsl:variable name="var90_resultof_cast" as="xs:double" select="xs:double(xs:decimal('4'))"/>
									<xsl:variable name="var91_resultof_cast" as="xs:double" select="xs:double(xs:decimal('6'))"/>
									<xsl:variable name="var92_resultof_cast" as="xs:double" select="xs:double(xs:decimal('2'))"/>
									<xsl:variable name="var93_resultof_cast" as="xs:string" select="fn:string(@value)"/>
									<xsl:variable name="var94_resultof_substring" as="xs:string" select="fn:substring($var93_resultof_cast, $var87_resultof_cast, $var88_resultof_cast)"/>
									<xsl:variable name="var95_resultof_substring" as="xs:string" select="fn:substring($var93_resultof_cast, $var90_resultof_cast, $var92_resultof_cast)"/>
									<xsl:variable name="var96_resultof_substring" as="xs:string" select="fn:substring($var93_resultof_cast, $var91_resultof_cast, $var92_resultof_cast)"/>
									<xsl:variable name="var97_resultof_substring" as="xs:string" select="fn:substring($var93_resultof_cast, xs:double(xs:decimal('9')), $var92_resultof_cast)"/>
									<xsl:variable name="var98_resultof_cast" as="xs:double" select="xs:double($var94_resultof_substring)"/>
									<xsl:variable name="var99_resultof_add" as="xs:double" select="($var98_resultof_cast + $var89_resultof_cast)"/>
									<xsl:variable name="var100_resultof_cast" as="xs:string" select="xs:string($var99_resultof_add)"/>
									<xsl:variable name="var101_resultof_concat" as="xs:string" select="fn:concat($var100_resultof_cast, '-')"/>
									<xsl:variable name="var102_resultof_concat" as="xs:string" select="fn:concat($var101_resultof_concat, $var95_resultof_substring)"/>
									<xsl:variable name="var103_resultof_concat" as="xs:string" select="fn:concat($var102_resultof_concat, '-')"/>
									<xsl:variable name="var104_resultof_concat" as="xs:string" select="fn:concat($var103_resultof_concat, $var96_resultof_substring)"/>
									<xsl:variable name="var114_val" as="xs:string">
										<xsl:choose>
											<xsl:when test="($var97_resultof_substring = '24')">
												<xsl:sequence select="fn:concat($var104_resultof_concat, 'T23:59:59')"/>
											</xsl:when>
											<xsl:otherwise>
												<xsl:variable name="var105_resultof_string_length" as="xs:integer" select="fn:string-length($var93_resultof_cast)"/>
												<xsl:choose>
													<xsl:when test="($var105_resultof_string_length &gt; xs:decimal('7'))">
														<xsl:variable name="var106_resultof_cast" as="xs:double" select="xs:double(xs:decimal('11'))"/>
														<xsl:variable name="var107_resultof_substring" as="xs:string" select="fn:substring($var93_resultof_cast, $var106_resultof_cast, $var92_resultof_cast)"/>
														<xsl:variable name="var108_resultof_concat" as="xs:string" select="fn:concat($var107_resultof_substring, '00000000')"/>
														<xsl:variable name="var109_resultof_substring" as="xs:string" select="fn:substring($var108_resultof_concat, $var87_resultof_cast, $var92_resultof_cast)"/>
														<xsl:variable name="var110_resultof_concat" as="xs:string" select="fn:concat($var104_resultof_concat, 'T')"/>
														<xsl:variable name="var111_resultof_concat" as="xs:string" select="fn:concat($var110_resultof_concat, $var97_resultof_substring)"/>
														<xsl:variable name="var112_resultof_concat" as="xs:string" select="fn:concat($var111_resultof_concat, ':')"/>
														<xsl:variable name="var113_resultof_concat" as="xs:string" select="fn:concat($var112_resultof_concat, $var109_resultof_substring)"/>
														<xsl:choose>
															<xsl:when test="($var105_resultof_string_length &gt; xs:decimal('13'))">
																<xsl:sequence select="fn:concat(fn:concat($var113_resultof_concat, ':'), fn:substring(fn:concat(fn:substring($var93_resultof_cast, xs:double(xs:decimal('13')), $var92_resultof_cast), '00000000'), $var87_resultof_cast, $var92_resultof_cast))"/>
															</xsl:when>
															<xsl:otherwise>
																<xsl:sequence select="fn:concat($var113_resultof_concat, ':00')"/>
															</xsl:otherwise>
														</xsl:choose>
													</xsl:when>
													<xsl:otherwise>
														<xsl:sequence select="fn:concat($var104_resultof_concat, 'T00:00:00')"/>
													</xsl:otherwise>
												</xsl:choose>
											</xsl:otherwise>
										</xsl:choose>
									</xsl:variable>
									<xsl:attribute name="value" namespace="" select="$var114_val"/>
								</xsl:for-each>
							</start>
							<xsl:variable name="var117_resultof_filter" as="node()?">
								<xsl:for-each select="$var14_stop">
									<xsl:variable name="var115_value" as="node()?" select="@value"/>
									<xsl:variable name="var116_resultof_exists" as="xs:boolean" select="fn:exists($var115_value)"/>
									<xsl:if test="$var116_resultof_exists">
										<xsl:sequence select="."/>
									</xsl:if>
								</xsl:for-each>
							</xsl:variable>
							<end>
								<xsl:for-each select="$var117_resultof_filter">
									<xsl:variable name="var118_resultof_cast" as="xs:double" select="xs:double(xs:decimal('1'))"/>
									<xsl:variable name="var119_resultof_cast" as="xs:double" select="xs:double(xs:decimal('3'))"/>
									<xsl:variable name="var120_resultof_cast" as="xs:double" select="xs:double('1700')"/>
									<xsl:variable name="var121_resultof_cast" as="xs:double" select="xs:double(xs:decimal('4'))"/>
									<xsl:variable name="var122_resultof_cast" as="xs:double" select="xs:double(xs:decimal('6'))"/>
									<xsl:variable name="var123_resultof_cast" as="xs:double" select="xs:double(xs:decimal('2'))"/>
									<xsl:variable name="var124_resultof_cast" as="xs:string" select="fn:string(@value)"/>
									<xsl:variable name="var125_resultof_substring" as="xs:string" select="fn:substring($var124_resultof_cast, $var118_resultof_cast, $var119_resultof_cast)"/>
									<xsl:variable name="var126_resultof_substring" as="xs:string" select="fn:substring($var124_resultof_cast, $var121_resultof_cast, $var123_resultof_cast)"/>
									<xsl:variable name="var127_resultof_substring" as="xs:string" select="fn:substring($var124_resultof_cast, $var122_resultof_cast, $var123_resultof_cast)"/>
									<xsl:variable name="var128_resultof_substring" as="xs:string" select="fn:substring($var124_resultof_cast, xs:double(xs:decimal('9')), $var123_resultof_cast)"/>
									<xsl:variable name="var129_resultof_cast" as="xs:double" select="xs:double($var125_resultof_substring)"/>
									<xsl:variable name="var130_resultof_add" as="xs:double" select="($var129_resultof_cast + $var120_resultof_cast)"/>
									<xsl:variable name="var131_resultof_cast" as="xs:string" select="xs:string($var130_resultof_add)"/>
									<xsl:variable name="var132_resultof_concat" as="xs:string" select="fn:concat($var131_resultof_cast, '-')"/>
									<xsl:variable name="var133_resultof_concat" as="xs:string" select="fn:concat($var132_resultof_concat, $var126_resultof_substring)"/>
									<xsl:variable name="var134_resultof_concat" as="xs:string" select="fn:concat($var133_resultof_concat, '-')"/>
									<xsl:variable name="var135_resultof_concat" as="xs:string" select="fn:concat($var134_resultof_concat, $var127_resultof_substring)"/>
									<xsl:variable name="var145_val" as="xs:string">
										<xsl:choose>
											<xsl:when test="($var128_resultof_substring = '24')">
												<xsl:sequence select="fn:concat($var135_resultof_concat, 'T23:59:59')"/>
											</xsl:when>
											<xsl:otherwise>
												<xsl:variable name="var136_resultof_string_length" as="xs:integer" select="fn:string-length($var124_resultof_cast)"/>
												<xsl:choose>
													<xsl:when test="($var136_resultof_string_length &gt; xs:decimal('7'))">
														<xsl:variable name="var137_resultof_cast" as="xs:double" select="xs:double(xs:decimal('11'))"/>
														<xsl:variable name="var138_resultof_substring" as="xs:string" select="fn:substring($var124_resultof_cast, $var137_resultof_cast, $var123_resultof_cast)"/>
														<xsl:variable name="var139_resultof_concat" as="xs:string" select="fn:concat($var138_resultof_substring, '00000000')"/>
														<xsl:variable name="var140_resultof_substring" as="xs:string" select="fn:substring($var139_resultof_concat, $var118_resultof_cast, $var123_resultof_cast)"/>
														<xsl:variable name="var141_resultof_concat" as="xs:string" select="fn:concat($var135_resultof_concat, 'T')"/>
														<xsl:variable name="var142_resultof_concat" as="xs:string" select="fn:concat($var141_resultof_concat, $var128_resultof_substring)"/>
														<xsl:variable name="var143_resultof_concat" as="xs:string" select="fn:concat($var142_resultof_concat, ':')"/>
														<xsl:variable name="var144_resultof_concat" as="xs:string" select="fn:concat($var143_resultof_concat, $var140_resultof_substring)"/>
														<xsl:choose>
															<xsl:when test="($var136_resultof_string_length &gt; xs:decimal('13'))">
																<xsl:sequence select="fn:concat(fn:concat($var144_resultof_concat, ':'), fn:substring(fn:concat(fn:substring($var124_resultof_cast, xs:double(xs:decimal('13')), $var123_resultof_cast), '00000000'), $var118_resultof_cast, $var123_resultof_cast))"/>
															</xsl:when>
															<xsl:otherwise>
																<xsl:sequence select="fn:concat($var144_resultof_concat, ':00')"/>
															</xsl:otherwise>
														</xsl:choose>
													</xsl:when>
													<xsl:otherwise>
														<xsl:sequence select="fn:concat($var135_resultof_concat, 'T00:00:00')"/>
													</xsl:otherwise>
												</xsl:choose>
											</xsl:otherwise>
										</xsl:choose>
									</xsl:variable>
									<xsl:attribute name="value" namespace="" select="$var145_val"/>
								</xsl:for-each>
							</end>
							<dosageInstruction>
								<route>
									<text>
										<xsl:for-each select="($var10_doses[fn:exists(ns0:dose/@route)])[(fn:string-length(fn:string(ns0:dose/@route)) &gt; xs:decimal('0'))]">
											<xsl:attribute name="value" namespace="" select="fn:string(ns0:dose/@route)"/>
										</xsl:for-each>
									</text>
								</route>
								<doseQuantity>
									<xsl:variable name="var149_resultof_filter" as="node()?">
										<xsl:for-each select="($var10_doses[fn:exists(ns0:dose/@dose)])[matches(fn:string(ns0:dose/@dose), '[0-9].*')]">
											<xsl:variable name="var146_resultof_cast" as="xs:string" select="fn:string(ns0:dose/@dose)"/>
											<xsl:variable name="var148_result" as="xs:boolean">
												<xsl:choose>
													<xsl:when test="fn:contains($var146_resultof_cast, ' ')">
														<xsl:variable name="var147_resultof_index_map" as="xs:boolean*">
															<xsl:for-each select="tokenize($var146_resultof_cast, replace(' ', '(\.|\$|\^|\{|\[|\(|\||\)|\*|\+|\?|\\)', '\\$1'))">
																<xsl:sequence select="(xs:decimal('1') = position())"/>
															</xsl:for-each>
														</xsl:variable>
														<xsl:sequence select="fn:exists($var147_resultof_index_map[.])"/>
													</xsl:when>
													<xsl:otherwise>
														<xsl:sequence select="fn:true()"/>
													</xsl:otherwise>
												</xsl:choose>
											</xsl:variable>
											<xsl:if test="$var148_result">
												<xsl:sequence select="."/>
											</xsl:if>
										</xsl:for-each>
									</xsl:variable>
									<value>
										<xsl:for-each select="$var149_resultof_filter">
											<xsl:variable name="var150_resultof_first" as="node()" select="ns0:dose/@dose"/>
											<xsl:variable name="var151_resultof_cast" as="xs:string" select="fn:string($var150_resultof_first)"/>
											<xsl:variable name="var153_result" as="xs:string">
												<xsl:choose>
													<xsl:when test="fn:contains($var151_resultof_cast, ' ')">
														<xsl:variable name="var152_resultof_index_map" as="xs:string*">
															<xsl:for-each select="tokenize($var151_resultof_cast, replace(' ', '(\.|\$|\^|\{|\[|\(|\||\)|\*|\+|\?|\\)', '\\$1'))">
																<xsl:if test="(xs:decimal('1') = position())">
																	<xsl:sequence select="."/>
																</xsl:if>
															</xsl:for-each>
														</xsl:variable>
														<xsl:sequence select="xs:string(fn:string-join(for $x in $var152_resultof_index_map return xs:string($x), ' '))"/>
													</xsl:when>
													<xsl:otherwise>
														<xsl:sequence select="$var151_resultof_cast"/>
													</xsl:otherwise>
												</xsl:choose>
											</xsl:variable>
											<xsl:attribute name="value" namespace="" select="xs:string(xs:decimal($var153_result))"/>
										</xsl:for-each>
									</value>
									<xsl:variable name="var167_resultof_filter" as="node()?">
										<xsl:for-each select="$var10_doses[fn:exists(ns0:dose/@dose)]">
											<xsl:variable name="var154_resultof_first" as="node()" select="ns0:dose"/>
											<xsl:variable name="var155_resultof_cast" as="xs:string" select="fn:string($var154_resultof_first/@dose)"/>
											<xsl:variable name="var166_result" as="xs:boolean">
												<xsl:choose>
													<xsl:when test="matches($var155_resultof_cast, '[0-9].*')">
														<xsl:variable name="var165_result" as="xs:string?">
															<xsl:choose>
																<xsl:when test="fn:contains($var155_resultof_cast, ' ')">
																	<xsl:variable name="var156_resultof_tokenize_regexp" as="xs:string*" select="tokenize($var155_resultof_cast, replace(' ', '(\.|\$|\^|\{|\[|\(|\||\)|\*|\+|\?|\\)', '\\$1'))"/>
																	<xsl:variable name="var157_resultof_index_map" as="xs:boolean*">
																		<xsl:for-each select="$var156_resultof_tokenize_regexp">
																			<xsl:sequence select="fn:not((xs:decimal('1') = position()))"/>
																		</xsl:for-each>
																	</xsl:variable>
																	<xsl:if test="fn:exists($var157_resultof_index_map[.])">
																		<xsl:variable name="var158_resultof_index_map" as="xs:string*">
																			<xsl:for-each select="$var156_resultof_tokenize_regexp">
																				<xsl:if test="fn:not((xs:decimal('1') = position()))">
																					<xsl:sequence select="."/>
																				</xsl:if>
																			</xsl:for-each>
																		</xsl:variable>
																		<xsl:sequence select="xs:string(fn:string-join(for $x in $var158_resultof_index_map return xs:string($x), ' '))"/>
																	</xsl:if>
																</xsl:when>
																<xsl:otherwise>
																	<xsl:variable name="var159_units" as="node()?" select="$var154_resultof_first/@units"/>
																	<xsl:if test="fn:exists($var159_units)">
																		<xsl:variable name="var160_resultof_cast" as="xs:string" select="fn:string($var159_units)"/>
																		<xsl:variable name="var161_resultof_contains" as="xs:boolean" select="fn:contains($var160_resultof_cast, ';')"/>
																		<xsl:variable name="var164_result" as="xs:boolean">
																			<xsl:choose>
																				<xsl:when test="$var161_resultof_contains">
																					<xsl:variable name="var162_resultof_index_map" as="xs:boolean*">
																						<xsl:for-each select="tokenize($var160_resultof_cast, replace(';', '(\.|\$|\^|\{|\[|\(|\||\)|\*|\+|\?|\\)', '\\$1'))">
																							<xsl:sequence select="(xs:decimal('1') = position())"/>
																						</xsl:for-each>
																					</xsl:variable>
																					<xsl:sequence select="fn:exists($var162_resultof_index_map[.])"/>
																				</xsl:when>
																				<xsl:otherwise>
																					<xsl:sequence select="fn:true()"/>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:variable>
																		<xsl:if test="$var164_result">
																			<xsl:choose>
																				<xsl:when test="$var161_resultof_contains">
																					<xsl:variable name="var163_resultof_index_map" as="xs:string*">
																						<xsl:for-each select="tokenize($var160_resultof_cast, replace(';', '(\.|\$|\^|\{|\[|\(|\||\)|\*|\+|\?|\\)', '\\$1'))">
																							<xsl:if test="(xs:decimal('1') = position())">
																								<xsl:sequence select="."/>
																							</xsl:if>
																						</xsl:for-each>
																					</xsl:variable>
																					<xsl:sequence select="xs:string(fn:string-join(for $x in $var163_resultof_index_map return xs:string($x), ' '))"/>
																				</xsl:when>
																				<xsl:otherwise>
																					<xsl:sequence select="$var160_resultof_cast"/>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:if>
																	</xsl:if>
																</xsl:otherwise>
															</xsl:choose>
														</xsl:variable>
														<xsl:sequence select="fn:exists($var165_result)"/>
													</xsl:when>
													<xsl:otherwise>
														<xsl:sequence select="fn:true()"/>
													</xsl:otherwise>
												</xsl:choose>
											</xsl:variable>
											<xsl:if test="$var166_result">
												<xsl:sequence select="."/>
											</xsl:if>
										</xsl:for-each>
									</xsl:variable>
									<units>
										<xsl:for-each select="$var167_resultof_filter">
											<xsl:variable name="var168_resultof_first" as="node()" select="ns0:dose"/>
											<xsl:variable name="var169_resultof_cast" as="xs:string" select="fn:string($var168_resultof_first/@dose)"/>
											<xsl:attribute name="value" namespace="">
												<xsl:choose>
													<xsl:when test="matches($var169_resultof_cast, '[0-9].*')">
														<xsl:choose>
															<xsl:when test="fn:contains($var169_resultof_cast, ' ')">
																<xsl:variable name="var170_resultof_index_map" as="xs:string*">
																	<xsl:for-each select="tokenize($var169_resultof_cast, replace(' ', '(\.|\$|\^|\{|\[|\(|\||\)|\*|\+|\?|\\)', '\\$1'))">
																		<xsl:if test="fn:not((xs:decimal('1') = position()))">
																			<xsl:sequence select="."/>
																		</xsl:if>
																	</xsl:for-each>
																</xsl:variable>
																<xsl:sequence select="xs:string(fn:string-join(for $x in $var170_resultof_index_map return xs:string($x), ' '))"/>
															</xsl:when>
															<xsl:otherwise>
																<xsl:variable name="var171_resultof_cast" as="xs:string" select="fn:string($var168_resultof_first/@units)"/>
																<xsl:choose>
																	<xsl:when test="fn:contains($var171_resultof_cast, ';')">
																		<xsl:variable name="var172_resultof_index_map" as="xs:string*">
																			<xsl:for-each select="tokenize($var171_resultof_cast, replace(';', '(\.|\$|\^|\{|\[|\(|\||\)|\*|\+|\?|\\)', '\\$1'))">
																				<xsl:if test="(xs:decimal('1') = position())">
																					<xsl:sequence select="."/>
																				</xsl:if>
																			</xsl:for-each>
																		</xsl:variable>
																		<xsl:sequence select="xs:string(fn:string-join(for $x in $var172_resultof_index_map return xs:string($x), ' '))"/>
																	</xsl:when>
																	<xsl:otherwise>
																		<xsl:sequence select="$var171_resultof_cast"/>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:otherwise>
														</xsl:choose>
													</xsl:when>
													<xsl:otherwise>
														<xsl:sequence select="$var169_resultof_cast"/>
													</xsl:otherwise>
												</xsl:choose>
											</xsl:attribute>
										</xsl:for-each>
									</units>
								</doseQuantity>
								<schedule>
									<extension>
										<url>
											<xsl:attribute name="value" namespace="" select="xs:string(xs:anyURI('org.socraticgrid.constants.VASchedule'))"/>
										</url>
										<xsl:variable name="var176_resultof_filter" as="node()?">
											<xsl:for-each select="$var10_doses[fn:exists(ns0:dose/@schedule)]">
												<xsl:variable name="var173_resultof_cast" as="xs:string" select="fn:string(ns0:dose/@schedule)"/>
												<xsl:variable name="var175_result" as="xs:boolean">
													<xsl:choose>
														<xsl:when test="fn:contains($var173_resultof_cast, ';')">
															<xsl:variable name="var174_resultof_index_map" as="xs:boolean*">
																<xsl:for-each select="tokenize($var173_resultof_cast, replace(';', '(\.|\$|\^|\{|\[|\(|\||\)|\*|\+|\?|\\)', '\\$1'))">
																	<xsl:sequence select="(xs:decimal('1') = position())"/>
																</xsl:for-each>
															</xsl:variable>
															<xsl:sequence select="fn:exists($var174_resultof_index_map[.])"/>
														</xsl:when>
														<xsl:otherwise>
															<xsl:sequence select="fn:true()"/>
														</xsl:otherwise>
													</xsl:choose>
												</xsl:variable>
												<xsl:if test="$var175_result">
													<xsl:sequence select="."/>
												</xsl:if>
											</xsl:for-each>
										</xsl:variable>
										<valueString>
											<xsl:for-each select="$var176_resultof_filter">
												<xsl:variable name="var177_resultof_cast" as="xs:string" select="fn:string(ns0:dose/@schedule)"/>
												<xsl:attribute name="value" namespace="">
													<xsl:choose>
														<xsl:when test="fn:contains($var177_resultof_cast, ';')">
															<xsl:variable name="var178_resultof_index_map" as="xs:string*">
																<xsl:for-each select="tokenize($var177_resultof_cast, replace(';', '(\.|\$|\^|\{|\[|\(|\||\)|\*|\+|\?|\\)', '\\$1'))">
																	<xsl:if test="(xs:decimal('1') = position())">
																		<xsl:sequence select="."/>
																	</xsl:if>
																</xsl:for-each>
															</xsl:variable>
															<xsl:sequence select="xs:string(fn:string-join(for $x in $var178_resultof_index_map return xs:string($x), ' '))"/>
														</xsl:when>
														<xsl:otherwise>
															<xsl:sequence select="$var177_resultof_cast"/>
														</xsl:otherwise>
													</xsl:choose>
												</xsl:attribute>
											</xsl:for-each>
										</valueString>
									</extension>
									<repeat>
										<duration>
											<xsl:for-each select="$var14_stop[fn:exists(@value)]">
												<xsl:variable name="var230_cur" as="node()" select="."/>
												<xsl:for-each select="$var11_start[fn:exists(@value)]">
													<xsl:variable name="var179_resultof_cast" as="xs:double" select="xs:double(xs:decimal('1'))"/>
													<xsl:variable name="var180_resultof_cast" as="xs:double" select="xs:double(xs:decimal('3'))"/>
													<xsl:variable name="var181_resultof_cast" as="xs:double" select="xs:double('1700')"/>
													<xsl:variable name="var182_resultof_cast" as="xs:double" select="xs:double(xs:decimal('4'))"/>
													<xsl:variable name="var183_resultof_cast" as="xs:double" select="xs:double(xs:decimal('6'))"/>
													<xsl:variable name="var184_resultof_cast" as="xs:double" select="xs:double(xs:decimal('2'))"/>
													<xsl:variable name="var185_resultof_cast" as="xs:double" select="xs:double(xs:decimal('9'))"/>
													<xsl:variable name="var186_resultof_cast" as="xs:string" select="fn:string(@value)"/>
													<xsl:variable name="var187_resultof_cast" as="xs:string" select="fn:string($var230_cur/@value)"/>
													<xsl:variable name="var188_resultof_substring" as="xs:string" select="fn:substring($var187_resultof_cast, $var182_resultof_cast, $var184_resultof_cast)"/>
													<xsl:variable name="var189_resultof_substring" as="xs:string" select="fn:substring($var187_resultof_cast, $var179_resultof_cast, $var180_resultof_cast)"/>
													<xsl:variable name="var190_resultof_substring" as="xs:string" select="fn:substring($var187_resultof_cast, $var183_resultof_cast, $var184_resultof_cast)"/>
													<xsl:variable name="var191_resultof_substring" as="xs:string" select="fn:substring($var186_resultof_cast, $var179_resultof_cast, $var180_resultof_cast)"/>
													<xsl:variable name="var192_resultof_substring" as="xs:string" select="fn:substring($var186_resultof_cast, $var182_resultof_cast, $var184_resultof_cast)"/>
													<xsl:variable name="var193_resultof_substring" as="xs:string" select="fn:substring($var186_resultof_cast, $var183_resultof_cast, $var184_resultof_cast)"/>
													<xsl:variable name="var194_resultof_substring" as="xs:string" select="fn:substring($var186_resultof_cast, $var185_resultof_cast, $var184_resultof_cast)"/>
													<xsl:variable name="var195_resultof_substring" as="xs:string" select="fn:substring($var187_resultof_cast, $var185_resultof_cast, $var184_resultof_cast)"/>
													<xsl:variable name="var196_resultof_cast" as="xs:double" select="xs:double($var189_resultof_substring)"/>
													<xsl:variable name="var197_resultof_cast" as="xs:double" select="xs:double($var191_resultof_substring)"/>
													<xsl:variable name="var198_resultof_add" as="xs:double" select="($var196_resultof_cast + $var181_resultof_cast)"/>
													<xsl:variable name="var199_resultof_add" as="xs:double" select="($var197_resultof_cast + $var181_resultof_cast)"/>
													<xsl:variable name="var200_resultof_cast" as="xs:string" select="xs:string($var198_resultof_add)"/>
													<xsl:variable name="var201_resultof_cast" as="xs:string" select="xs:string($var199_resultof_add)"/>
													<xsl:variable name="var202_resultof_concat" as="xs:string" select="fn:concat($var200_resultof_cast, '-')"/>
													<xsl:variable name="var203_resultof_concat" as="xs:string" select="fn:concat($var201_resultof_cast, '-')"/>
													<xsl:variable name="var204_resultof_concat" as="xs:string" select="fn:concat($var202_resultof_concat, $var188_resultof_substring)"/>
													<xsl:variable name="var205_resultof_concat" as="xs:string" select="fn:concat($var203_resultof_concat, $var192_resultof_substring)"/>
													<xsl:variable name="var206_resultof_concat" as="xs:string" select="fn:concat($var204_resultof_concat, '-')"/>
													<xsl:variable name="var207_resultof_concat" as="xs:string" select="fn:concat($var205_resultof_concat, '-')"/>
													<xsl:variable name="var208_resultof_concat" as="xs:string" select="fn:concat($var206_resultof_concat, $var190_resultof_substring)"/>
													<xsl:variable name="var209_resultof_concat" as="xs:string" select="fn:concat($var207_resultof_concat, $var193_resultof_substring)"/>
													<xsl:variable name="var219_result" as="xs:string">
														<xsl:choose>
															<xsl:when test="($var195_resultof_substring = '24')">
																<xsl:sequence select="fn:concat($var208_resultof_concat, 'T23:59:59')"/>
															</xsl:when>
															<xsl:otherwise>
																<xsl:variable name="var210_resultof_string_length" as="xs:integer" select="fn:string-length($var187_resultof_cast)"/>
																<xsl:choose>
																	<xsl:when test="($var210_resultof_string_length &gt; xs:decimal('7'))">
																		<xsl:variable name="var211_resultof_cast" as="xs:double" select="xs:double(xs:decimal('11'))"/>
																		<xsl:variable name="var212_resultof_substring" as="xs:string" select="fn:substring($var187_resultof_cast, $var211_resultof_cast, $var184_resultof_cast)"/>
																		<xsl:variable name="var213_resultof_concat" as="xs:string" select="fn:concat($var212_resultof_substring, '00000000')"/>
																		<xsl:variable name="var214_resultof_substring" as="xs:string" select="fn:substring($var213_resultof_concat, $var179_resultof_cast, $var184_resultof_cast)"/>
																		<xsl:variable name="var215_resultof_concat" as="xs:string" select="fn:concat($var208_resultof_concat, 'T')"/>
																		<xsl:variable name="var216_resultof_concat" as="xs:string" select="fn:concat($var215_resultof_concat, $var195_resultof_substring)"/>
																		<xsl:variable name="var217_resultof_concat" as="xs:string" select="fn:concat($var216_resultof_concat, ':')"/>
																		<xsl:variable name="var218_resultof_concat" as="xs:string" select="fn:concat($var217_resultof_concat, $var214_resultof_substring)"/>
																		<xsl:choose>
																			<xsl:when test="($var210_resultof_string_length &gt; xs:decimal('13'))">
																				<xsl:sequence select="fn:concat(fn:concat($var218_resultof_concat, ':'), fn:substring(fn:concat(fn:substring($var187_resultof_cast, xs:double(xs:decimal('13')), $var184_resultof_cast), '00000000'), $var179_resultof_cast, $var184_resultof_cast))"/>
																			</xsl:when>
																			<xsl:otherwise>
																				<xsl:sequence select="fn:concat($var218_resultof_concat, ':00')"/>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:when>
																	<xsl:otherwise>
																		<xsl:sequence select="fn:concat($var208_resultof_concat, 'T00:00:00')"/>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:otherwise>
														</xsl:choose>
													</xsl:variable>
													<xsl:variable name="var229_result" as="xs:string">
														<xsl:choose>
															<xsl:when test="($var194_resultof_substring = '24')">
																<xsl:sequence select="fn:concat($var209_resultof_concat, 'T23:59:59')"/>
															</xsl:when>
															<xsl:otherwise>
																<xsl:variable name="var220_resultof_string_length" as="xs:integer" select="fn:string-length($var186_resultof_cast)"/>
																<xsl:choose>
																	<xsl:when test="($var220_resultof_string_length &gt; xs:decimal('7'))">
																		<xsl:variable name="var221_resultof_cast" as="xs:double" select="xs:double(xs:decimal('11'))"/>
																		<xsl:variable name="var222_resultof_substring" as="xs:string" select="fn:substring($var186_resultof_cast, $var221_resultof_cast, $var184_resultof_cast)"/>
																		<xsl:variable name="var223_resultof_concat" as="xs:string" select="fn:concat($var222_resultof_substring, '00000000')"/>
																		<xsl:variable name="var224_resultof_substring" as="xs:string" select="fn:substring($var223_resultof_concat, $var179_resultof_cast, $var184_resultof_cast)"/>
																		<xsl:variable name="var225_resultof_concat" as="xs:string" select="fn:concat($var209_resultof_concat, 'T')"/>
																		<xsl:variable name="var226_resultof_concat" as="xs:string" select="fn:concat($var225_resultof_concat, $var194_resultof_substring)"/>
																		<xsl:variable name="var227_resultof_concat" as="xs:string" select="fn:concat($var226_resultof_concat, ':')"/>
																		<xsl:variable name="var228_resultof_concat" as="xs:string" select="fn:concat($var227_resultof_concat, $var224_resultof_substring)"/>
																		<xsl:choose>
																			<xsl:when test="($var220_resultof_string_length &gt; xs:decimal('13'))">
																				<xsl:sequence select="fn:concat(fn:concat($var228_resultof_concat, ':'), fn:substring(fn:concat(fn:substring($var186_resultof_cast, xs:double(xs:decimal('13')), $var184_resultof_cast), '00000000'), $var179_resultof_cast, $var184_resultof_cast))"/>
																			</xsl:when>
																			<xsl:otherwise>
																				<xsl:sequence select="fn:concat($var228_resultof_concat, ':00')"/>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:when>
																	<xsl:otherwise>
																		<xsl:sequence select="fn:concat($var209_resultof_concat, 'T00:00:00')"/>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:otherwise>
														</xsl:choose>
													</xsl:variable>
													<xsl:attribute name="value" namespace="" select="xs:string(fn:days-from-duration((xs:dateTime($var219_result) - xs:dateTime($var229_result))))"/>
												</xsl:for-each>
											</xsl:for-each>
										</duration>
										<xsl:variable name="var285_resultof_map" as="xs:boolean?">
											<xsl:for-each select="$var14_stop">
												<xsl:variable name="var231_value" as="node()?" select="@value"/>
												<xsl:choose>
													<xsl:when test="fn:exists($var231_value)">
														<xsl:variable name="var284_resultof_map" as="xs:boolean?">
															<xsl:for-each select="$var11_start">
																<xsl:variable name="var232_value" as="node()?" select="@value"/>
																<xsl:choose>
																	<xsl:when test="fn:exists($var232_value)">
																		<xsl:variable name="var233_resultof_cast" as="xs:double" select="xs:double(xs:decimal('1'))"/>
																		<xsl:variable name="var234_resultof_cast" as="xs:double" select="xs:double(xs:decimal('3'))"/>
																		<xsl:variable name="var235_resultof_cast" as="xs:double" select="xs:double('1700')"/>
																		<xsl:variable name="var236_resultof_cast" as="xs:double" select="xs:double(xs:decimal('4'))"/>
																		<xsl:variable name="var237_resultof_cast" as="xs:double" select="xs:double(xs:decimal('6'))"/>
																		<xsl:variable name="var238_resultof_cast" as="xs:double" select="xs:double(xs:decimal('2'))"/>
																		<xsl:variable name="var239_resultof_cast" as="xs:double" select="xs:double(xs:decimal('9'))"/>
																		<xsl:variable name="var240_resultof_cast" as="xs:string" select="fn:string($var232_value)"/>
																		<xsl:variable name="var241_resultof_cast" as="xs:string" select="fn:string($var231_value)"/>
																		<xsl:variable name="var242_resultof_substring" as="xs:string" select="fn:substring($var241_resultof_cast, $var236_resultof_cast, $var238_resultof_cast)"/>
																		<xsl:variable name="var243_resultof_substring" as="xs:string" select="fn:substring($var241_resultof_cast, $var233_resultof_cast, $var234_resultof_cast)"/>
																		<xsl:variable name="var244_resultof_substring" as="xs:string" select="fn:substring($var241_resultof_cast, $var237_resultof_cast, $var238_resultof_cast)"/>
																		<xsl:variable name="var245_resultof_substring" as="xs:string" select="fn:substring($var240_resultof_cast, $var233_resultof_cast, $var234_resultof_cast)"/>
																		<xsl:variable name="var246_resultof_substring" as="xs:string" select="fn:substring($var240_resultof_cast, $var236_resultof_cast, $var238_resultof_cast)"/>
																		<xsl:variable name="var247_resultof_substring" as="xs:string" select="fn:substring($var240_resultof_cast, $var237_resultof_cast, $var238_resultof_cast)"/>
																		<xsl:variable name="var248_resultof_substring" as="xs:string" select="fn:substring($var240_resultof_cast, $var239_resultof_cast, $var238_resultof_cast)"/>
																		<xsl:variable name="var249_resultof_substring" as="xs:string" select="fn:substring($var241_resultof_cast, $var239_resultof_cast, $var238_resultof_cast)"/>
																		<xsl:variable name="var250_resultof_cast" as="xs:double" select="xs:double($var243_resultof_substring)"/>
																		<xsl:variable name="var251_resultof_cast" as="xs:double" select="xs:double($var245_resultof_substring)"/>
																		<xsl:variable name="var252_resultof_add" as="xs:double" select="($var250_resultof_cast + $var235_resultof_cast)"/>
																		<xsl:variable name="var253_resultof_add" as="xs:double" select="($var251_resultof_cast + $var235_resultof_cast)"/>
																		<xsl:variable name="var254_resultof_cast" as="xs:string" select="xs:string($var252_resultof_add)"/>
																		<xsl:variable name="var255_resultof_cast" as="xs:string" select="xs:string($var253_resultof_add)"/>
																		<xsl:variable name="var256_resultof_concat" as="xs:string" select="fn:concat($var254_resultof_cast, '-')"/>
																		<xsl:variable name="var257_resultof_concat" as="xs:string" select="fn:concat($var255_resultof_cast, '-')"/>
																		<xsl:variable name="var258_resultof_concat" as="xs:string" select="fn:concat($var256_resultof_concat, $var242_resultof_substring)"/>
																		<xsl:variable name="var259_resultof_concat" as="xs:string" select="fn:concat($var257_resultof_concat, $var246_resultof_substring)"/>
																		<xsl:variable name="var260_resultof_concat" as="xs:string" select="fn:concat($var258_resultof_concat, '-')"/>
																		<xsl:variable name="var261_resultof_concat" as="xs:string" select="fn:concat($var259_resultof_concat, '-')"/>
																		<xsl:variable name="var262_resultof_concat" as="xs:string" select="fn:concat($var260_resultof_concat, $var244_resultof_substring)"/>
																		<xsl:variable name="var263_resultof_concat" as="xs:string" select="fn:concat($var261_resultof_concat, $var247_resultof_substring)"/>
																		<xsl:variable name="var273_result" as="xs:string">
																			<xsl:choose>
																				<xsl:when test="($var249_resultof_substring = '24')">
																					<xsl:sequence select="fn:concat($var262_resultof_concat, 'T23:59:59')"/>
																				</xsl:when>
																				<xsl:otherwise>
																					<xsl:variable name="var264_resultof_string_length" as="xs:integer" select="fn:string-length($var241_resultof_cast)"/>
																					<xsl:choose>
																						<xsl:when test="($var264_resultof_string_length &gt; xs:decimal('7'))">
																							<xsl:variable name="var265_resultof_cast" as="xs:double" select="xs:double(xs:decimal('11'))"/>
																							<xsl:variable name="var266_resultof_substring" as="xs:string" select="fn:substring($var241_resultof_cast, $var265_resultof_cast, $var238_resultof_cast)"/>
																							<xsl:variable name="var267_resultof_concat" as="xs:string" select="fn:concat($var266_resultof_substring, '00000000')"/>
																							<xsl:variable name="var268_resultof_substring" as="xs:string" select="fn:substring($var267_resultof_concat, $var233_resultof_cast, $var238_resultof_cast)"/>
																							<xsl:variable name="var269_resultof_concat" as="xs:string" select="fn:concat($var262_resultof_concat, 'T')"/>
																							<xsl:variable name="var270_resultof_concat" as="xs:string" select="fn:concat($var269_resultof_concat, $var249_resultof_substring)"/>
																							<xsl:variable name="var271_resultof_concat" as="xs:string" select="fn:concat($var270_resultof_concat, ':')"/>
																							<xsl:variable name="var272_resultof_concat" as="xs:string" select="fn:concat($var271_resultof_concat, $var268_resultof_substring)"/>
																							<xsl:choose>
																								<xsl:when test="($var264_resultof_string_length &gt; xs:decimal('13'))">
																									<xsl:sequence select="fn:concat(fn:concat($var272_resultof_concat, ':'), fn:substring(fn:concat(fn:substring($var241_resultof_cast, xs:double(xs:decimal('13')), $var238_resultof_cast), '00000000'), $var233_resultof_cast, $var238_resultof_cast))"/>
																								</xsl:when>
																								<xsl:otherwise>
																									<xsl:sequence select="fn:concat($var272_resultof_concat, ':00')"/>
																								</xsl:otherwise>
																							</xsl:choose>
																						</xsl:when>
																						<xsl:otherwise>
																							<xsl:sequence select="fn:concat($var262_resultof_concat, 'T00:00:00')"/>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:variable>
																		<xsl:variable name="var283_result" as="xs:string">
																			<xsl:choose>
																				<xsl:when test="($var248_resultof_substring = '24')">
																					<xsl:sequence select="fn:concat($var263_resultof_concat, 'T23:59:59')"/>
																				</xsl:when>
																				<xsl:otherwise>
																					<xsl:variable name="var274_resultof_string_length" as="xs:integer" select="fn:string-length($var240_resultof_cast)"/>
																					<xsl:choose>
																						<xsl:when test="($var274_resultof_string_length &gt; xs:decimal('7'))">
																							<xsl:variable name="var275_resultof_cast" as="xs:double" select="xs:double(xs:decimal('11'))"/>
																							<xsl:variable name="var276_resultof_substring" as="xs:string" select="fn:substring($var240_resultof_cast, $var275_resultof_cast, $var238_resultof_cast)"/>
																							<xsl:variable name="var277_resultof_concat" as="xs:string" select="fn:concat($var276_resultof_substring, '00000000')"/>
																							<xsl:variable name="var278_resultof_substring" as="xs:string" select="fn:substring($var277_resultof_concat, $var233_resultof_cast, $var238_resultof_cast)"/>
																							<xsl:variable name="var279_resultof_concat" as="xs:string" select="fn:concat($var263_resultof_concat, 'T')"/>
																							<xsl:variable name="var280_resultof_concat" as="xs:string" select="fn:concat($var279_resultof_concat, $var248_resultof_substring)"/>
																							<xsl:variable name="var281_resultof_concat" as="xs:string" select="fn:concat($var280_resultof_concat, ':')"/>
																							<xsl:variable name="var282_resultof_concat" as="xs:string" select="fn:concat($var281_resultof_concat, $var278_resultof_substring)"/>
																							<xsl:choose>
																								<xsl:when test="($var274_resultof_string_length &gt; xs:decimal('13'))">
																									<xsl:sequence select="fn:concat(fn:concat($var282_resultof_concat, ':'), fn:substring(fn:concat(fn:substring($var240_resultof_cast, xs:double(xs:decimal('13')), $var238_resultof_cast), '00000000'), $var233_resultof_cast, $var238_resultof_cast))"/>
																								</xsl:when>
																								<xsl:otherwise>
																									<xsl:sequence select="fn:concat($var282_resultof_concat, ':00')"/>
																								</xsl:otherwise>
																							</xsl:choose>
																						</xsl:when>
																						<xsl:otherwise>
																							<xsl:sequence select="fn:concat($var263_resultof_concat, 'T00:00:00')"/>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:variable>
																		<xsl:sequence select="(fn:days-from-duration((xs:dateTime($var273_result) - xs:dateTime($var283_result))) &gt; xs:decimal('0'))"/>
																	</xsl:when>
																	<xsl:otherwise>
																		<xsl:sequence select="fn:false()"/>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:for-each>
														</xsl:variable>
														<xsl:sequence select="fn:exists($var284_resultof_map[.])"/>
													</xsl:when>
													<xsl:otherwise>
														<xsl:sequence select="fn:false()"/>
													</xsl:otherwise>
												</xsl:choose>
											</xsl:for-each>
										</xsl:variable>
										<units>
											<xsl:if test="fn:exists($var285_resultof_map[.])">
												<xsl:attribute name="value" namespace="" select="'d'"/>
											</xsl:if>
										</units>
									</repeat>
								</schedule>
							</dosageInstruction>
						</administrationRequest>
					</Prescription>
				</xsl:for-each>
			</xsl:for-each>
		</PrescriptionList>
	</xsl:template>
</xsl:stylesheet>
