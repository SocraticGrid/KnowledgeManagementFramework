<?xml version="1.0" encoding="UTF-8"?>
<!--
This file was generated by Altova MapForce 2013sp1

YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.

Refer to the Altova MapForce Documentation for further details.
http://www.altova.com/mapforce
-->
<xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:ns0="http://mdws.medora.va.gov/EmrSvc" xmlns:vmf="http://www.altova.com/MapForce/UDF/vmf" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2005/xpath-functions" exclude-result-prefixes="ns0 vmf xs fn">
	<xsl:template name="vmf:vmf1_inputtoresult">
		<xsl:param name="input" select="()"/>
		<xsl:choose>
			<xsl:when test="$input='0'">
				<xsl:value-of select="'1'"/>
			</xsl:when>
			<xsl:when test="$input='1'">
				<xsl:value-of select="'0'"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="''"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="vmf:vmf2_inputtoresult">
		<xsl:param name="input" select="()"/>
		<xsl:choose>
			<xsl:when test="$input='0'">
				<xsl:value-of select="'verified'"/>
			</xsl:when>
			<xsl:when test="$input='1'">
				<xsl:value-of select="'unverified'"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="'unknown'"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:output method="xml" encoding="UTF-8" indent="yes"/>
	<xsl:param name="status" as="xs:string?" select="()"/>
	<xsl:template match="/">
		<ProblemList xmlns="http://hl7.org/fhir" xmlns:xhtml="http://www.w3.org/1999/xhtml">
			<xsl:attribute name="xsi:schemaLocation" namespace="http://www.w3.org/2001/XMLSchema-instance" select="'http://hl7.org/fhir C:/Users/JERRYG~1/Dropbox/Cognitive/CDS/fhir-all-xsd/cm_problems.xsd'"/>
			<xsl:for-each select="ns0:TaggedTextArray">
				<xsl:variable name="var4_resultof_filter" as="node()*">
					<xsl:for-each select="ns0:results/ns0:TaggedText/ns0:text/ns0:results/ns0:problems/ns0:problem">
						<xsl:variable name="var2_resultof_map" as="xs:boolean?">
							<xsl:for-each select="ns0:status">
								<xsl:variable name="var1_result" as="xs:string">
									<xsl:choose>
										<xsl:when test="fn:exists($status)">
											<xsl:sequence select="$status"/>
										</xsl:when>
										<xsl:otherwise>
											<xsl:sequence select="'ACTIVE;INACTIVE'"/>
										</xsl:otherwise>
									</xsl:choose>
								</xsl:variable>
								<xsl:sequence select="fn:contains($var1_result, fn:string(@name))"/>
							</xsl:for-each>
						</xsl:variable>
						<xsl:variable name="var3_resultof_any" as="xs:boolean" select="fn:exists($var2_resultof_map[.])"/>
						<xsl:if test="$var3_resultof_any">
							<xsl:sequence select="."/>
						</xsl:if>
					</xsl:for-each>
				</xsl:variable>
				<xsl:for-each select="$var4_resultof_filter">
					<xsl:variable name="var5_facility" as="node()?" select="ns0:facility"/>
					<xsl:variable name="var6_acuity" as="node()?" select="ns0:acuity"/>
					<xsl:variable name="var7_unverified" as="node()?" select="ns0:unverified"/>
					<xsl:variable name="var8_provider" as="node()?" select="ns0:provider"/>
					<xsl:variable name="var10_resultof_map" as="node()?">
						<xsl:for-each select="$var6_acuity">
							<xsl:variable name="var9_resultof_cast" as="xs:string" select="fn:string(@name)"/>
							<xsl:attribute name="value" namespace="" select="$var9_resultof_cast"/>
						</xsl:for-each>
					</xsl:variable>
					<xsl:variable name="var11_resultof_map" as="node()?">
						<xsl:for-each select="$var8_provider">
							<xsl:attribute name="id" namespace="" select="xs:string(xs:integer(fn:string(@code)))"/>
						</xsl:for-each>
					</xsl:variable>
					<xsl:variable name="var12_resultof_map" as="node()?">
						<xsl:for-each select="$var7_unverified">
							<xsl:attribute name="value" namespace="">
								<xsl:call-template name="vmf:vmf2_inputtoresult">
									<xsl:with-param name="input" select="xs:string(xs:integer(fn:string(@value)))" as="xs:string"/>
								</xsl:call-template>
							</xsl:attribute>
						</xsl:for-each>
					</xsl:variable>
					<Problem>
						<xsl:for-each select="ns0:id">
							<xsl:attribute name="id" namespace="" select="xs:string(xs:integer(fn:string(@value)))"/>
						</xsl:for-each>
						<extension>
							<url>
								<xsl:attribute name="value" namespace="" select="xs:string(xs:anyURI('org.socraticgrid.constants.acuity'))"/>
							</url>
							<valueCodeableConcept>
								<coding>
									<system>
										<xsl:attribute name="value" namespace="" select="xs:string(xs:anyURI('VAAcuity'))"/>
									</system>
									<code>
										<xsl:for-each select="$var6_acuity">
											<xsl:attribute name="value" namespace="" select="fn:string(@code)"/>
										</xsl:for-each>
									</code>
									<display>
										<xsl:sequence select="$var10_resultof_map"/>
									</display>
								</coding>
								<text>
									<xsl:sequence select="$var10_resultof_map"/>
								</text>
							</valueCodeableConcept>
						</extension>
						<extension>
							<url>
								<xsl:attribute name="value" namespace="" select="xs:string(xs:anyURI('org.socraticgrid.constant.dateUpdated'))"/>
							</url>
							<valueDate>
								<xsl:for-each select="ns0:updated">
									<xsl:variable name="var13_resultof_cast" as="xs:double" select="xs:double(xs:decimal('2'))"/>
									<xsl:variable name="var14_resultof_cast" as="xs:string" select="xs:string(xs:integer(fn:string(@value)))"/>
									<xsl:variable name="var15_resultof_concat" as="xs:string" select="fn:concat(fn:concat(fn:concat(fn:concat(xs:string((xs:double(fn:substring($var14_resultof_cast, xs:double(xs:decimal('1')), xs:double(xs:decimal('3')))) + xs:double('1700'))), '-'), fn:substring($var14_resultof_cast, xs:double(xs:decimal('4')), $var13_resultof_cast)), '-'), fn:substring($var14_resultof_cast, xs:double(xs:decimal('6')), $var13_resultof_cast))"/>
									<xsl:attribute name="value" namespace="" select="$var15_resultof_concat"/>
								</xsl:for-each>
							</valueDate>
						</extension>
						<contained>
							<Location>
								<contained>
									<Location>
										<name>
											<xsl:for-each select="ns0:location">
												<xsl:variable name="var16_resultof_cast" as="xs:string" select="fn:string(@value)"/>
												<xsl:attribute name="value" namespace="" select="$var16_resultof_cast"/>
											</xsl:for-each>
										</name>
									</Location>
								</contained>
								<name>
									<xsl:for-each select="$var5_facility">
										<xsl:attribute name="id" namespace="" select="xs:string(xs:integer(fn:string(@code)))"/>
									</xsl:for-each>
									<xsl:for-each select="$var5_facility">
										<xsl:variable name="var17_resultof_cast" as="xs:string" select="fn:string(@name)"/>
										<xsl:attribute name="value" namespace="" select="$var17_resultof_cast"/>
									</xsl:for-each>
								</name>
								<type>
									<text>
										<xsl:for-each select="ns0:service">
											<xsl:variable name="var18_resultof_cast" as="xs:string" select="fn:string(@value)"/>
											<xsl:attribute name="value" namespace="" select="$var18_resultof_cast"/>
										</xsl:for-each>
									</text>
								</type>
							</Location>
						</contained>
						<asserter>
							<xsl:sequence select="$var11_resultof_map"/>
							<type>
								<xsl:attribute name="value" namespace="" select="'provider'"/>
							</type>
							<display>
								<xsl:sequence select="$var11_resultof_map"/>
								<xsl:for-each select="$var8_provider">
									<xsl:variable name="var19_resultof_cast" as="xs:string" select="fn:string(@name)"/>
									<xsl:attribute name="value" namespace="" select="$var19_resultof_cast"/>
								</xsl:for-each>
							</display>
						</asserter>
						<dateAsserted>
							<xsl:for-each select="ns0:entered">
								<xsl:variable name="var20_resultof_cast" as="xs:double" select="xs:double(xs:decimal('2'))"/>
								<xsl:variable name="var21_resultof_cast" as="xs:string" select="xs:string(xs:integer(fn:string(@value)))"/>
								<xsl:variable name="var22_resultof_concat" as="xs:string" select="fn:concat(fn:concat(fn:concat(fn:concat(xs:string((xs:double(fn:substring($var21_resultof_cast, xs:double(xs:decimal('1')), xs:double(xs:decimal('3')))) + xs:double('1700'))), '-'), fn:substring($var21_resultof_cast, xs:double(xs:decimal('4')), $var20_resultof_cast)), '-'), fn:substring($var21_resultof_cast, xs:double(xs:decimal('6')), $var20_resultof_cast))"/>
								<xsl:attribute name="value" namespace="" select="$var22_resultof_concat"/>
							</xsl:for-each>
						</dateAsserted>
						<code>
							<coding>
								<system>
									<xsl:attribute name="value" namespace="" select="xs:string(xs:anyURI('ICD9'))"/>
								</system>
								<code>
									<xsl:for-each select="ns0:icd">
										<xsl:attribute name="value" namespace="" select="fn:string(@value)"/>
									</xsl:for-each>
								</code>
							</coding>
							<text>
								<xsl:for-each select="ns0:name">
									<xsl:variable name="var23_resultof_cast" as="xs:string" select="fn:string(@value)"/>
									<xsl:attribute name="value" namespace="" select="$var23_resultof_cast"/>
								</xsl:for-each>
							</text>
						</code>
						<category>
							<xsl:attribute name="id" namespace="" select="'problem'"/>
						</category>
						<xsl:for-each select="ns0:status">
							<xsl:variable name="var24_resultof_cast" as="xs:string" select="fn:string(@name)"/>
							<status>
								<coding>
									<system>
										<xsl:attribute name="value" namespace="" select="xs:string(xs:anyURI('VAStatus'))"/>
									</system>
									<code>
										<xsl:attribute name="value" namespace="" select="fn:string(@code)"/>
									</code>
									<display>
										<xsl:attribute name="value" namespace="" select="$var24_resultof_cast"/>
									</display>
								</coding>
								<text>
									<xsl:attribute name="value" namespace="" select="$var24_resultof_cast"/>
								</text>
							</status>
						</xsl:for-each>
						<certainty>
							<coding>
								<system>
									<xsl:if test="fn:exists($var7_unverified)">
										<xsl:attribute name="value" namespace="" select="xs:string(xs:anyURI('verified'))"/>
									</xsl:if>
								</system>
								<code>
									<xsl:for-each select="$var7_unverified">
										<xsl:attribute name="value" namespace="">
											<xsl:call-template name="vmf:vmf1_inputtoresult">
												<xsl:with-param name="input" select="xs:string(xs:integer(fn:string(@value)))" as="xs:string"/>
											</xsl:call-template>
										</xsl:attribute>
									</xsl:for-each>
								</code>
								<display>
									<xsl:sequence select="$var12_resultof_map"/>
								</display>
							</coding>
							<text>
								<xsl:sequence select="$var12_resultof_map"/>
							</text>
						</certainty>
						<onsetDate>
							<xsl:for-each select="ns0:onset">
								<xsl:variable name="var25_resultof_cast" as="xs:double" select="xs:double(xs:decimal('2'))"/>
								<xsl:variable name="var26_resultof_cast" as="xs:string" select="xs:string(xs:integer(fn:string(@value)))"/>
								<xsl:variable name="var27_resultof_concat" as="xs:string" select="fn:concat(fn:concat(fn:concat(fn:concat(xs:string((xs:double(fn:substring($var26_resultof_cast, xs:double(xs:decimal('1')), xs:double(xs:decimal('3')))) + xs:double('1700'))), '-'), fn:substring($var26_resultof_cast, xs:double(xs:decimal('4')), $var25_resultof_cast)), '-'), fn:substring($var26_resultof_cast, xs:double(xs:decimal('6')), $var25_resultof_cast))"/>
								<xsl:attribute name="value" namespace="" select="$var27_resultof_concat"/>
							</xsl:for-each>
						</onsetDate>
						<abatementBoolean>
							<xsl:attribute name="value" namespace="" select="xs:string(fn:false())"/>
						</abatementBoolean>
					</Problem>
				</xsl:for-each>
			</xsl:for-each>
		</ProblemList>
	</xsl:template>
</xsl:stylesheet>
