<?xml version="1.0" encoding="UTF-8"?>
<!--
This file was generated by Altova MapForce 2013sp1

YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.

Refer to the Altova MapForce Documentation for further details.
http://www.altova.com/mapforce
-->
<xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:ns0="http://mdws.medora.va.gov/EmrSvc" xmlns:vmf="http://www.altova.com/MapForce/UDF/vmf" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2005/xpath-functions" exclude-result-prefixes="ns0 vmf xs fn">
	<xsl:template name="vmf:vmf1_inputtoresult">
		<xsl:param name="input" select="()"/>
		<xsl:choose>
			<xsl:when test="$input='H'">
				<xsl:value-of select="'home'"/>
			</xsl:when>
			<xsl:when test="$input='WP'">
				<xsl:value-of select="'work'"/>
			</xsl:when>
			<xsl:when test="$input='M'">
				<xsl:value-of select="'mobile'"/>
			</xsl:when>
			<xsl:when test="$input='T'">
				<xsl:value-of select="'temp'"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="'home'"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:output method="xml" encoding="UTF-8" indent="yes"/>
	<xsl:template match="/">
		<Patient xmlns="http://hl7.org/fhir" xmlns:xhtml="http://www.w3.org/1999/xhtml">
			<xsl:attribute name="xsi:schemaLocation" namespace="http://www.w3.org/2001/XMLSchema-instance" select="'http://hl7.org/fhir C:/Users/JERRYG~1/Dropbox/Cognitive/CDS/fhir-all-xsd/patient.xsd'"/>
			<xsl:for-each select="ns0:TaggedTextArray">
				<xsl:variable name="var1_resultof_cast" as="xs:double" select="xs:double(xs:decimal('6'))"/>
				<xsl:variable name="var2_resultof_cast" as="xs:double" select="xs:double(xs:decimal('2'))"/>
				<xsl:variable name="var3_resultof_cast" as="xs:double" select="xs:double(xs:decimal('4'))"/>
				<xsl:variable name="var4_resultof_first" as="node()" select="ns0:results/ns0:TaggedText/ns0:text/ns0:results/ns0:demographics/ns0:patient"/>
				<xsl:variable name="var5_address" as="node()?" select="$var4_resultof_first/ns0:address"/>
				<xsl:variable name="var6_resultof_cast" as="xs:string" select="xs:string(xs:integer(fn:string($var4_resultof_first/ns0:id/@value)))"/>
				<xsl:variable name="var7_resultof_cast" as="xs:string" select="xs:string(xs:integer(fn:string($var4_resultof_first/ns0:dob/@value)))"/>
				<xsl:variable name="var8_resultof_cast" as="xs:string" select="xs:string(xs:integer(fn:string($var4_resultof_first/ns0:ssn/@value)))"/>
				<xsl:attribute name="id" namespace="" select="$var6_resultof_cast"/>
				<identifier>
					<label>
						<xsl:attribute name="value" namespace="" select="$var6_resultof_cast"/>
					</label>
					<system>
						<xsl:attribute name="value" namespace="" select="xs:string(xs:anyURI('dfn'))"/>
					</system>
					<id>
						<xsl:attribute name="value" namespace="" select="$var6_resultof_cast"/>
					</id>
				</identifier>
				<details>
					<identifier>
						<label>
							<xsl:attribute name="value" namespace="" select="fn:concat('XXX-XX-', fn:substring($var8_resultof_cast, $var1_resultof_cast, $var3_resultof_cast))"/>
						</label>
						<system>
							<xsl:attribute name="value" namespace="" select="xs:string(xs:anyURI('ssn'))"/>
						</system>
						<id>
							<xsl:attribute name="value" namespace="" select="$var8_resultof_cast"/>
						</id>
					</identifier>
					<xsl:for-each select="$var4_resultof_first/ns0:icn">
						<xsl:variable name="var9_resultof_cast" as="xs:string" select="xs:string(xs:integer(fn:string(@value)))"/>
						<identifier>
							<label>
								<xsl:attribute name="value" namespace="" select="$var9_resultof_cast"/>
							</label>
							<system>
								<xsl:attribute name="value" namespace="" select="xs:string(xs:anyURI('national.dfn'))"/>
							</system>
							<id>
								<xsl:attribute name="value" namespace="" select="$var9_resultof_cast"/>
							</id>
						</identifier>
					</xsl:for-each>
					<name>
						<text>
							<xsl:attribute name="value" namespace="" select="fn:string($var4_resultof_first/ns0:fullName/@value)"/>
						</text>
						<family>
							<xsl:attribute name="value" namespace="" select="fn:string($var4_resultof_first/ns0:familyName/@value)"/>
						</family>
						<given>
							<xsl:attribute name="value" namespace="" select="fn:string($var4_resultof_first/ns0:givenNames/@value)"/>
						</given>
					</name>
					<xsl:for-each select="$var4_resultof_first/ns0:telecomList/ns0:telecom">
						<telecom>
							<value>
								<xsl:attribute name="value" namespace="" select="fn:string(@value)"/>
							</value>
							<use>
								<xsl:attribute name="value" namespace="">
									<xsl:call-template name="vmf:vmf1_inputtoresult">
										<xsl:with-param name="input" select="fn:string(@usageType)" as="xs:string"/>
									</xsl:call-template>
								</xsl:attribute>
							</use>
						</telecom>
					</xsl:for-each>
					<gender>
						<display>
							<xsl:attribute name="value" namespace="" select="fn:string($var4_resultof_first/ns0:gender/@value)"/>
						</display>
					</gender>
					<birthDate>
						<xsl:attribute name="value" namespace="" select="fn:concat(fn:concat(fn:concat(fn:concat(xs:string((xs:double(fn:substring($var7_resultof_cast, xs:double(xs:decimal('1')), xs:double(xs:decimal('3')))) + xs:double('1700'))), '-'), fn:substring($var7_resultof_cast, $var3_resultof_cast, $var2_resultof_cast)), '-'), fn:substring($var7_resultof_cast, $var1_resultof_cast, $var2_resultof_cast))"/>
					</birthDate>
					<address>
						<line>
							<xsl:for-each select="$var5_address">
								<xsl:attribute name="value" namespace="" select="fn:string(@streetLine1)"/>
							</xsl:for-each>
						</line>
						<city>
							<xsl:for-each select="$var5_address">
								<xsl:attribute name="value" namespace="" select="fn:string(@city)"/>
							</xsl:for-each>
						</city>
						<state>
							<xsl:for-each select="$var5_address">
								<xsl:attribute name="value" namespace="" select="fn:string(@stateProvince)"/>
							</xsl:for-each>
						</state>
						<zip>
							<xsl:for-each select="$var5_address[fn:exists(@postalCode)]">
								<xsl:attribute name="value" namespace="" select="fn:string(@postalCode)"/>
							</xsl:for-each>
						</zip>
					</address>
				</details>
				<contact>
					<details>
						<name>
							<text>
								<xsl:for-each select="$var4_resultof_first/ns0:supports">
									<xsl:attribute name="value" namespace="" select="fn:string(ns0:support/@name)"/>
								</xsl:for-each>
							</text>
						</name>
					</details>
				</contact>
			</xsl:for-each>
		</Patient>
	</xsl:template>
</xsl:stylesheet>
