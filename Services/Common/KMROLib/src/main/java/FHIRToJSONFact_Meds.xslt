<?xml version="1.0" encoding="UTF-8"?>
<!--
This file was generated by Altova MapForce 2013sp1

YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.

Refer to the Altova MapForce Documentation for further details.
http://www.altova.com/mapforce
-->
<xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:ns0="http://hl7.org/fhir" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2005/xpath-functions" exclude-result-prefixes="ns0 xs fn">
	<xsl:output method="xml" encoding="UTF-8" indent="yes"/>
	<xsl:param name="status" as="xs:string?" select="()"/>
	<xsl:template match="/">
		<patientDataFact>
			<xsl:attribute name="xsi:noNamespaceSchemaLocation" namespace="http://www.w3.org/2001/XMLSchema-instance" select="'C:/Users/JERRYG~1/Dropbox/Cognitive/CDS/JSONFact_Med.xsd'"/>
			<factType>Medications</factType>
			<xsl:for-each select="ns0:PrescriptionList">
				<xsl:variable name="var8_resultof_filter" as="node()*">
					<xsl:for-each select="ns0:Prescription[fn:exists(ns0:status/@value)]">
						<xsl:variable name="var6_" as="node()" select="."/>
						<xsl:variable name="var5_resultof_map" as="xs:boolean?">
							<xsl:for-each select="ns0:medicine/ns0:identification">
								<xsl:variable name="var4_resultof_map" as="xs:boolean*">
									<xsl:for-each select="ns0:coding">
										<xsl:variable name="var3_resultof_map" as="xs:boolean?">
											<xsl:for-each select="ns0:code">
												<xsl:variable name="var1_value" as="node()?" select="@value"/>
												<xsl:choose>
													<xsl:when test="fn:exists($var1_value)">
														<xsl:variable name="var2_result" as="xs:string">
															<xsl:choose>
																<xsl:when test="fn:exists($status)">
																	<xsl:sequence select="$status"/>
																</xsl:when>
																<xsl:otherwise>
																	<xsl:sequence select="'active;completed'"/>
																</xsl:otherwise>
															</xsl:choose>
														</xsl:variable>
														<xsl:sequence select="(fn:contains($var2_result, fn:string($var6_/ns0:status/@value)) and (fn:string-length(fn:string($var1_value)) &gt; xs:decimal('0')))"/>
													</xsl:when>
													<xsl:otherwise>
														<xsl:sequence select="fn:false()"/>
													</xsl:otherwise>
												</xsl:choose>
											</xsl:for-each>
										</xsl:variable>
										<xsl:sequence select="fn:exists($var3_resultof_map[.])"/>
									</xsl:for-each>
								</xsl:variable>
								<xsl:sequence select="fn:exists($var4_resultof_map[.])"/>
							</xsl:for-each>
						</xsl:variable>
						<xsl:variable name="var7_resultof_any" as="xs:boolean" select="fn:exists($var5_resultof_map[.])"/>
						<xsl:if test="$var7_resultof_any">
							<xsl:sequence select="."/>
						</xsl:if>
					</xsl:for-each>
				</xsl:variable>
				<xsl:for-each select="$var8_resultof_filter">
					<xsl:variable name="var9_dispense" as="node()?" select="ns0:dispense"/>
					<xsl:variable name="var10_resultof_first" as="node()" select="ns0:administrationRequest"/>
					<xsl:variable name="var11_resultof_first" as="node()" select="ns0:medicine"/>
					<xsl:variable name="var12_value" as="node()?" select="ns0:status/@value"/>
					<xsl:variable name="var13_dosageInstruction" as="node()+" select="$var10_resultof_first/ns0:dosageInstruction"/>
					<xsl:variable name="var14_value" as="node()?" select="ns0:prescribed/@value"/>
					<xsl:variable name="var15_identification" as="node()?" select="$var11_resultof_first/ns0:identification"/>
					<xsl:variable name="var16_extension" as="node()*" select="$var11_resultof_first/ns0:extension"/>
					<facts>
						<xsl:if test="fn:exists($var14_value)">
							<orderDate>
								<xsl:sequence select="xs:string(xs:date(fn:substring(fn:string($var14_value), xs:double(xs:decimal('1')), xs:double(xs:decimal('10')))))"/>
							</orderDate>
						</xsl:if>
						<xsl:for-each select="($var15_identification/ns0:text)[fn:exists(@value)]">
							<medication>
								<xsl:sequence select="fn:string(@value)"/>
							</medication>
						</xsl:for-each>
						<xsl:for-each select="($var15_identification/ns0:coding/ns0:code)[fn:exists(@value)]">
							<code>
								<xsl:sequence select="fn:string(@value)"/>
							</code>
						</xsl:for-each>
						<xsl:for-each select="($var15_identification/ns0:coding/ns0:system)[fn:exists(@value)]">
							<codeSystemName>
								<xsl:sequence select="xs:string(xs:anyURI(fn:string(@value)))"/>
							</codeSystemName>
						</xsl:for-each>
						<xsl:for-each select="($var15_identification/ns0:coding/ns0:system)[fn:exists(@value)]">
							<codeSystemCode>
								<xsl:sequence select="xs:string(xs:anyURI(fn:string(@value)))"/>
							</codeSystemCode>
						</xsl:for-each>
						<xsl:variable name="var19_resultof_filter" as="node()?">
							<xsl:for-each select="$var10_resultof_first/ns0:description">
								<xsl:variable name="var17_value" as="node()?" select="@value"/>
								<xsl:variable name="var18_resultof_exists" as="xs:boolean" select="fn:exists($var17_value)"/>
								<xsl:if test="$var18_resultof_exists">
									<xsl:sequence select="."/>
								</xsl:if>
							</xsl:for-each>
						</xsl:variable>
						<xsl:for-each select="$var19_resultof_filter">
							<sig>
								<xsl:sequence select="fn:string(@value)"/>
							</sig>
						</xsl:for-each>
						<xsl:for-each select="($var9_dispense/ns0:quantity/ns0:units)[fn:exists(@value)]">
							<formulation>
								<xsl:sequence select="fn:string(@value)"/>
							</formulation>
						</xsl:for-each>
						<xsl:for-each select="($var13_dosageInstruction/ns0:doseQuantity/ns0:units)[fn:exists(@value)]">
							<unit>
								<xsl:sequence select="fn:string(@value)"/>
							</unit>
						</xsl:for-each>
						<xsl:for-each select="$var13_dosageInstruction/ns0:doseQuantity">
							<xsl:variable name="var21_cur" as="node()" select="."/>
							<xsl:for-each select="ns0:value[fn:exists(@value)]">
								<xsl:variable name="var20_cur" as="node()" select="."/>
								<xsl:for-each select="($var21_cur/ns0:units)[fn:exists(@value)]">
									<dose>
										<xsl:sequence select="fn:concat(fn:concat(xs:string(xs:decimal(fn:string($var20_cur/@value))), ' '), fn:string(@value))"/>
									</dose>
								</xsl:for-each>
							</xsl:for-each>
						</xsl:for-each>
						<xsl:for-each select="($var13_dosageInstruction/ns0:route/ns0:text)[fn:exists(@value)]">
							<route>
								<xsl:sequence select="fn:string(@value)"/>
							</route>
						</xsl:for-each>
						<frequency>TDB</frequency>
						<xsl:for-each select="($var13_dosageInstruction/ns0:schedule/ns0:extension/ns0:valueString)[fn:exists(@value)]">
							<schedule>
								<xsl:sequence select="fn:string(@value)"/>
							</schedule>
						</xsl:for-each>
						<xsl:for-each select="$var10_resultof_first/ns0:duration">
							<xsl:variable name="var25_cur" as="node()" select="."/>
							<xsl:variable name="var24_resultof_filter" as="node()?">
								<xsl:for-each select="ns0:value[fn:exists(@value)][(fn:string-length(xs:string(xs:decimal(fn:string(@value)))) &gt; xs:decimal('0'))]">
									<xsl:variable name="var22_resultof_map" as="xs:boolean?">
										<xsl:for-each select="$var25_cur/ns0:units">
											<xsl:sequence select="fn:exists(@value)"/>
										</xsl:for-each>
									</xsl:variable>
									<xsl:variable name="var23_resultof_any" as="xs:boolean" select="fn:exists($var22_resultof_map[.])"/>
									<xsl:if test="$var23_resultof_any">
										<xsl:sequence select="."/>
									</xsl:if>
								</xsl:for-each>
							</xsl:variable>
							<xsl:for-each select="$var24_resultof_filter">
								<duration>
									<xsl:sequence select="fn:concat(fn:concat(xs:string(xs:decimal(fn:string(@value))), ' '), fn:string(($var25_cur/ns0:units)[fn:exists(@value)]/@value))"/>
								</duration>
							</xsl:for-each>
						</xsl:for-each>
						<xsl:for-each select="($var9_dispense/ns0:quantity/ns0:value)[fn:exists(@value)]">
							<quantity>
								<xsl:sequence select="xs:string(xs:decimal(fn:string(@value)))"/>
							</quantity>
						</xsl:for-each>
						<xsl:for-each select="($var9_dispense/ns0:repeats)[fn:exists(@value)]">
							<refills>
								<xsl:sequence select="xs:string(xs:integer(fn:string(@value)))"/>
							</refills>
						</xsl:for-each>
						<xsl:variable name="var28_resultof_filter" as="node()?">
							<xsl:for-each select="ns0:prescriber/ns0:display">
								<xsl:variable name="var26_value" as="node()?" select="@value"/>
								<xsl:variable name="var27_resultof_exists" as="xs:boolean" select="fn:exists($var26_value)"/>
								<xsl:if test="$var27_resultof_exists">
									<xsl:sequence select="."/>
								</xsl:if>
							</xsl:for-each>
						</xsl:variable>
						<xsl:for-each select="$var28_resultof_filter">
							<prescriber>
								<xsl:sequence select="fn:string(@value)"/>
							</prescriber>
						</xsl:for-each>
						<xsl:for-each select="($var10_resultof_first/ns0:end)[fn:exists(@value)]">
							<orderExpireDate>
								<xsl:sequence select="xs:string(xs:date(fn:substring(fn:string(@value), xs:double(xs:decimal('1')), xs:double(xs:decimal('10')))))"/>
							</orderExpireDate>
						</xsl:for-each>
						<xsl:for-each select="(ns0:identifier/ns0:id)[fn:exists(@value)]">
							<itemId>
								<xsl:sequence select="fn:string(@value)"/>
							</itemId>
						</xsl:for-each>
						<xsl:if test="fn:exists($var12_value)">
							<status>
								<xsl:sequence select="fn:string($var12_value)"/>
							</status>
						</xsl:if>
						<xsl:for-each select="($var16_extension/ns0:valueCodeableConcept/ns0:text)[fn:exists(@value)]">
							<drugClass>
								<xsl:sequence select="fn:string(@value)"/>
							</drugClass>
						</xsl:for-each>
						<xsl:for-each select="($var16_extension/ns0:valueCodeableConcept/ns0:coding/ns0:code)[fn:exists(@value)]">
							<drugClassCode>
								<xsl:sequence select="fn:string(@value)"/>
							</drugClassCode>
						</xsl:for-each>
						<xsl:for-each select="($var16_extension/ns0:valueCodeableConcept/ns0:coding/ns0:system)[fn:exists(@value)]">
							<drugClassCodeSystem>
								<xsl:sequence select="xs:string(xs:anyURI(fn:string(@value)))"/>
							</drugClassCodeSystem>
						</xsl:for-each>
					</facts>
				</xsl:for-each>
			</xsl:for-each>
		</patientDataFact>
	</xsl:template>
</xsl:stylesheet>
