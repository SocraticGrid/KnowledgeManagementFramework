<?xml version="1.0" encoding="UTF-8"?>
<!--
This file was generated by Altova MapForce 2013sp1

YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.

Refer to the Altova MapForce Documentation for further details.
http://www.altova.com/mapforce
-->
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:ns0="http://mdws.medora.va.gov/EmrSvc" xmlns:user="http://www.altova.com/MapForce/UDF/user" xmlns:agt="http://www.altova.com/Mapforce/agt" xmlns:xs="http://www.w3.org/2001/XMLSchema" exclude-result-prefixes="ns0 user agt xs">
	<xsl:template name="user:FMDateToHL7">
		<xsl:param name="FMdate" select="/.."/>
		<xsl:value-of select="concat(concat(string((number(substring($FMdate, '1', '3')) + number('1700'))), substring($FMdate, '4', '4')), substring($FMdate, '9', '6'))"/>
	</xsl:template>
	<xsl:output method="xml" encoding="UTF-8" indent="yes"/>
	<xsl:template name="agt:var3_MapTocm_proedures_function">
		<xsl:param name="par0"/>
		<xsl:attribute name="value">
			<xsl:value-of select="string($par0/@value)"/>
		</xsl:attribute>
	</xsl:template>
	<xsl:template match="/">
		<ProcedureList xmlns="http://hl7.org/fhir" xmlns:xhtml="http://www.w3.org/1999/xhtml">
			<xsl:attribute name="xsi:schemaLocation" namespace="http://www.w3.org/2001/XMLSchema-instance">http://hl7.org/fhir C:/Users/JERRYG~1/Dropbox/Cognitive/CDS/fhir-all-xsd/cm_proedures.xsd</xsl:attribute>
			<Procedure>
				<xsl:for-each select="ns0:TaggedTextArray/ns0:results/ns0:TaggedText/ns0:text/ns0:results/ns0:procedures/ns0:procedure/ns0:id">
					<xsl:attribute name="id" namespace="">
						<xsl:value-of select="string(@value)"/>
					</xsl:attribute>
				</xsl:for-each>
				<contained>
					<Order>
						<xsl:for-each select="ns0:TaggedTextArray/ns0:results/ns0:TaggedText/ns0:text/ns0:results/ns0:procedures/ns0:procedure/ns0:order">
							<xsl:attribute name="id" namespace="">
								<xsl:value-of select="string(floor(number(string(@code))))"/>
							</xsl:attribute>
						</xsl:for-each>
					</Order>
					<Location>
						<contained>
							<Location>
								<name>
									<xsl:for-each select="ns0:TaggedTextArray/ns0:results/ns0:TaggedText/ns0:text/ns0:results/ns0:procedures/ns0:procedure/ns0:location">
										<xsl:attribute name="id" namespace="">
											<xsl:value-of select="string(floor(number(string(@code))))"/>
										</xsl:attribute>
									</xsl:for-each>
									<xsl:for-each select="ns0:TaggedTextArray/ns0:results/ns0:TaggedText/ns0:text/ns0:results/ns0:procedures/ns0:procedure/ns0:location">
										<xsl:attribute name="value" namespace="">
											<xsl:value-of select="string(@name)"/>
										</xsl:attribute>
									</xsl:for-each>
								</name>
							</Location>
						</contained>
						<name>
							<xsl:for-each select="ns0:TaggedTextArray/ns0:results/ns0:TaggedText/ns0:text/ns0:results/ns0:procedures/ns0:procedure/ns0:facility">
								<xsl:attribute name="id" namespace="">
									<xsl:value-of select="string(floor(number(string(@code))))"/>
								</xsl:attribute>
							</xsl:for-each>
							<xsl:for-each select="ns0:TaggedTextArray/ns0:results/ns0:TaggedText/ns0:text/ns0:results/ns0:procedures/ns0:procedure/ns0:facility">
								<xsl:attribute name="value" namespace="">
									<xsl:value-of select="string(@name)"/>
								</xsl:attribute>
							</xsl:for-each>
						</name>
					</Location>
				</contained>
				<procedureTime>
					<xsl:for-each select="ns0:TaggedTextArray/ns0:results/ns0:TaggedText/ns0:text/ns0:results/ns0:procedures/ns0:procedure/ns0:dateTime">
						<xsl:attribute name="value" namespace="">
							<xsl:call-template name="user:FMDateToHL7">
								<xsl:with-param name="FMdate" select="string(number(string(@value)))"/>
							</xsl:call-template>
						</xsl:attribute>
					</xsl:for-each>
				</procedureTime>
				<code>
					<coding>
						<system>
							<xsl:attribute name="value" namespace="">cpt</xsl:attribute>
						</system>
						<code>
							<xsl:for-each select="ns0:TaggedTextArray/ns0:results/ns0:TaggedText/ns0:text/ns0:results/ns0:procedures/ns0:procedure/ns0:type">
								<xsl:attribute name="value" namespace="">
									<xsl:value-of select="string(floor(number(string(@code))))"/>
								</xsl:attribute>
							</xsl:for-each>
						</code>
						<display>
							<xsl:for-each select="ns0:TaggedTextArray/ns0:results/ns0:TaggedText/ns0:text/ns0:results/ns0:procedures/ns0:procedure/ns0:type">
								<xsl:attribute name="value" namespace="">
									<xsl:value-of select="string(@name)"/>
								</xsl:attribute>
							</xsl:for-each>
						</display>
					</coding>
					<text>
						<xsl:for-each select="ns0:TaggedTextArray/ns0:results/ns0:TaggedText/ns0:text/ns0:results/ns0:procedures/ns0:procedure/ns0:name">
							<xsl:attribute name="value" namespace="">
								<xsl:value-of select="string(@value)"/>
							</xsl:attribute>
						</xsl:for-each>
					</text>
				</code>
				<status>
					<text>
						<xsl:for-each select="ns0:TaggedTextArray/ns0:results/ns0:TaggedText/ns0:text/ns0:results/ns0:procedures/ns0:procedure/ns0:status">
							<xsl:variable name="var1_value">
								<xsl:if test="@value">
									<xsl:value-of select="'1'"/>
								</xsl:if>
							</xsl:variable>
							<xsl:variable name="var2_resultof_exists" select="boolean(string($var1_value))"/>
							<xsl:if test="string((string($var2_resultof_exists) != 'false')) != 'false'">
								<xsl:call-template name="agt:var3_MapTocm_proedures_function">
									<xsl:with-param name="par0" select="."/>
								</xsl:call-template>
							</xsl:if>
						</xsl:for-each>
					</text>
				</status>
				<category>
					<text>
						<xsl:for-each select="ns0:TaggedTextArray/ns0:results/ns0:TaggedText/ns0:text/ns0:results/ns0:procedures/ns0:procedure/ns0:category">
							<xsl:attribute name="value" namespace="">
								<xsl:value-of select="string(@value)"/>
							</xsl:attribute>
						</xsl:for-each>
					</text>
				</category>
				<source>
					<xsl:for-each select="ns0:TaggedTextArray/ns0:results/ns0:TaggedText/ns0:text/ns0:results/ns0:procedures/ns0:procedure/ns0:provider">
						<xsl:variable name="var4_resultof_cast" select="string(floor(number(string(@code))))"/>
						<xsl:attribute name="id" namespace="">
							<xsl:value-of select="$var4_resultof_cast"/>
						</xsl:attribute>
					</xsl:for-each>
				</source>
				<performer>
					<type>
						<xsl:attribute name="value" namespace="">provider</xsl:attribute>
					</type>
					<display>
						<xsl:for-each select="ns0:TaggedTextArray/ns0:results/ns0:TaggedText/ns0:text/ns0:results/ns0:procedures/ns0:procedure/ns0:provider">
							<xsl:variable name="var5_resultof_cast" select="string(floor(number(string(@code))))"/>
							<xsl:attribute name="id" namespace="">
								<xsl:value-of select="$var5_resultof_cast"/>
							</xsl:attribute>
						</xsl:for-each>
						<xsl:for-each select="ns0:TaggedTextArray/ns0:results/ns0:TaggedText/ns0:text/ns0:results/ns0:procedures/ns0:procedure/ns0:provider">
							<xsl:attribute name="value" namespace="">
								<xsl:value-of select="string(@name)"/>
							</xsl:attribute>
						</xsl:for-each>
					</display>
				</performer>
				<relatedItem>
					<xsl:for-each select="ns0:TaggedTextArray/ns0:results/ns0:TaggedText/ns0:text/ns0:results/ns0:procedures/ns0:procedure/ns0:documents/ns0:document">
						<xsl:attribute name="id" namespace="">
							<xsl:value-of select="string(@id)"/>
						</xsl:attribute>
					</xsl:for-each>
					<type>
						<xsl:attribute name="value" namespace="">document</xsl:attribute>
					</type>
					<target>
						<display>
							<xsl:for-each select="ns0:TaggedTextArray/ns0:results/ns0:TaggedText/ns0:text/ns0:results/ns0:procedures/ns0:procedure/ns0:documents/ns0:document">
								<xsl:attribute name="value" namespace="">
									<xsl:value-of select="string(@localTitle)"/>
								</xsl:attribute>
							</xsl:for-each>
						</display>
					</target>
				</relatedItem>
			</Procedure>
		</ProcedureList>
	</xsl:template>
</xsl:stylesheet>
